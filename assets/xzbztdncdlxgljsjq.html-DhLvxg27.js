import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,o as l}from"./app-BeHkqkE2.js";const t={};function r(o,e){return l(),n("div",null,e[0]||(e[0]=[a('<p>作为一款高效的垃圾收集器，G1在JDK7中加入JVM，在JDK9中取代CMS成为了默认的垃圾收集器。</p><h2 id="_1-垃圾收集器回顾" tabindex="-1"><a class="header-anchor" href="#_1-垃圾收集器回顾"><span>1 垃圾收集器回顾</span></a></h2><h3 id="_1-1-新生代" tabindex="-1"><a class="header-anchor" href="#_1-1-新生代"><span>1.1 新生代</span></a></h3><p>新生代采用复制算法，主要的垃圾收集器有三个，Serial、Parallel New 和 Parallel Scavenge，特性如下：</p><ul><li>Serial:单线程收集器，串行方式运行，GC 进行时，其他线程都会停止工作。在单核 CPU 下，收集效率最高。</li><li>Parallel New：Serial 的多线程版本，新生代默认收集器。在多核 CPU 下，效率更高，可以跟CMS收集器配合使用。</li><li>Parallel Scavenge：多线程收集器，更加注重吞吐量，适合交互少的任务，不能跟 CMS 配合使用。</li></ul><h3 id="_1-1-老年代" tabindex="-1"><a class="header-anchor" href="#_1-1-老年代"><span>1.1 老年代</span></a></h3><ul><li>Serial Old：采用标记-整理(压缩)算法，单线程收集。</li><li>Parallel Old：采用标记-整理(压缩)算法，可以跟 Parallel Scavenge 配合使用</li><li>CMS：Concurrent Mark Sweep，采用标记-清除算法，收集线程可以跟用户线程一起工作。</li></ul><blockquote><p>CMS缺点：吞吐量低、无法处理浮动垃圾、标记清除算法会产生大量内存碎片、并发模式失败后会切到Serial old。</p></blockquote><ul><li>G1：把堆划分成多个大小相等的Region，新生代和老年代不再物理隔离，多核 CPU 和大内存的场景下有很好的性能。新生代使用复制算法，老年代使用标记-压缩(整理)算法。</li></ul><h2 id="_2-g1介绍" tabindex="-1"><a class="header-anchor" href="#_2-g1介绍"><span>2 G1介绍</span></a></h2><h3 id="_2-1-初识g1" tabindex="-1"><a class="header-anchor" href="#_2-1-初识g1"><span>2.1 初识G1</span></a></h3><p>G1垃圾收集器主要用于多处理器、大内存的场景，它有五个属性：分代、增量、并行(大多时候可以并发)、stop the word、标记整理。</p><ul><li>分代：跟其他垃圾收集器一样，G1把堆分成了年轻代和老年代，垃圾收集主要在年轻代，并且年轻代回收效率最高。偶尔也会在老年代进行回收。</li><li>增量：为了让垃圾收集时STW时间更短，G1采用增量和分步进行回收。G1通过对应用之前的行为和停顿时间进行分析构建出可预测停顿时间模型，并且利用这个信息来预测停顿时间内的垃圾收集情况。比如：G1会首先回收那些收集效率高的内存区域(这些区域大部分空间是可回收垃圾，这也是为啥叫G1的原因）。</li><li>并行和并发：为了提高吞吐量，一些操作需要STW。一些需要花费很多时间的操作，比如整堆操作(像全局标记)<strong>可以并发执行，同时可以并发跟应用并行执行</strong>。</li><li>标记整理：G1主要使用标记整理算法来进行垃圾收集，标记阶段跟“标记清除”算法一样，但标记之后不会直接对可回收对象进⾏清理，⽽是让所有存活对象都移动到一端，然后直接回收掉移动之后边界以外的内存。如下图：</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdicNg1QXA7Ribhb0pfzpGBLZGdZlBP3PMNu2ePDEAAVZuaSNnfSgCmibhOBoFTjRgJ03XeYV2OiaA2cGg/640?wx_fmt=png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们知道，垃圾收集器的一个目标就是STW(stop the word)越短越好。利用可预测停顿时间模型，G1为垃圾收集设定一个STW的目标时间(通过 -XX:MaxGCPauseMillis 参数设定，默认200ms)，G1尽可能地在这个时间内完成垃圾收集，并且在不需要额外配置的情况下实现高吞吐量。</p><p>G1致力于在下面的应用和环境下寻找延迟和吞吐量的最佳平衡：</p><ul><li>堆大小达到10GB以上，并且一半以上的空间被存活的对象占用</li><li>随着系统长期运行，对象分配和升级速率变化很快</li><li>堆中存在大量内存碎片</li><li>垃圾收集时停顿时间不能超过几百毫秒，避免垃圾收集造成的长时间停顿。</li></ul><p>如果在JDK8中使用G1，我们可以使用参数 -XX:+UseG1GC 来开启。</p><blockquote><p>G1并不是一款实时收集器，它尽最大努力以高性能完成 MaxGCPauseMillis 设置的停顿时间，但并不能绝对保证在这个时间内完成收集。</p></blockquote><h3 id="_2-2-堆布局" tabindex="-1"><a class="header-anchor" href="#_2-2-堆布局"><span>2.2 堆布局</span></a></h3><p>G1把整个堆分成了大小相等的region，每一个region都是连续的虚拟内存，region是内存分配和回收的基本单位。如下图：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJmV3TwviaoB7vicS8cGicZNJuK2C6OSZ0rru3PFMNt6CsaLfiaylVOH26Kw/640?wx_fmt=png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>红色带&quot;S&quot;的region表示新生代的survivor，红色不带&quot;S&quot;的表示新生代eden，浅蓝色不带&quot;H&quot;的表示老年代，浅蓝色带&quot;H&quot;的表示老年代中的大对象。跟G1之前的内存分配策略不同的是，survivor、eden、老年代这些区域可能是不连续的。</p><p>G1在停顿的时候可以回收整个新生代的region，新生代region的对象要不复制到survivor区要不复制到老年代region。同时每次停顿都可以回收一部分老年代的内存，把老年代从一个region复制到另一个region。</p><h3 id="_2-3-关于region" tabindex="-1"><a class="header-anchor" href="#_2-3-关于region"><span>2.3 关于region</span></a></h3><p>上一节我们看到，整个堆内存被G1分成了多个大小相等的region，每个堆大约可以有2048个region，每个region大小为 1~32 MB(必须是2的次方)。region的大小通过 -XX:G1HeapRegionSize 来设置，所以按照默认值来G1能管理的最大内存大约 32MB * 2048 = 64G。</p><h3 id="_2-4-大对象" tabindex="-1"><a class="header-anchor" href="#_2-4-大对象"><span>2.4 大对象</span></a></h3><p>大对象是指大小超过了region一半的对象，大对象可以横跨多个region，给大对象分配内存的时候会直接分配在老年代，并不会分配在eden区。</p><p>如下图，一个大对象占据了两个半region，给大对象分配内存时，必须从一个region开始分配连续的region，在大对象被回收前，最后一个region不能被分配给其他对象。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJ3sG7a9vDPHyG9EsSTFzOTp6Gib8M2icliaG8KjicVR3hLtq6UPuOHg0VDA/640?wx_fmt=png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>大对象什么时候回收</strong>？通常，只有在mark结束以后的Cleanup停顿阶段或者FullGC的时候，死亡的大对象才会被回收掉。但是，基本类型(比如bool数组、所有的整形数组、浮点型数组等)的数组大对象有个例外,G1会在任何GC停顿的时候回收这些死亡大对象。这个默认是开启的，但是可以使用 -XX:G1EagerReclaimHumongousObjects 这个参数禁用掉。</p><p>分配大对象的时候，因为占用空间太大，可能会过早发生GC停顿。G1在每次分配大对象的时候都会去检查当前堆内存占用是否超过初始堆占用阈值IHOP(The Initiating Heap Occupancy Percent)，如果当前的堆占用率超过了IHOP阈值，就会立刻触发 initial mark。<strong>关于initial mark详见第4节</strong>。</p><p>即使是在FullGC的时候，大对象也是永远不会被移动的。这可能导致过早发生FullGC或者是意外的OOM，因为此时虽然还有大量的空闲内存，但是这些内存都是region中的内存碎片。</p><h2 id="_3-内存分配" tabindex="-1"><a class="header-anchor" href="#_3-内存分配"><span>3 内存分配</span></a></h2><p>G1虽然把堆内存划分成了多个region，但是依然存在新生代和老年代的概念。G1新增了2个控制新生代内存大小的参数，-XX:G1NewSizePercent(默认等于5)，-XX:G1MaxNewSizePercent(默认等于60)。也就是说新生代大小默认占整个堆内存的 5% ~ 60%。</p><p>根据前面介绍，一个堆大概可以分配2048个region，每个region最大32M，这样G1管理的整个堆的大小最大可以是64G，新生代占用的大小范围是 3.2G ~ 38.4G。</p><p>对于 -XX:G1NewSizePercent 和 -XX:G1MaxNewSizePercent，下面几个问题需要注意：</p><ol><li><strong>如果设置了-Xmn，那这两个参数是否生效？</strong></li></ol><p>生效，比如堆大小是64G，设置 -Xmn3.2G，那么就等价于 -XX:G1NewSizePercent=5 并且 -XX:G1MaxNewSizePercent=5，因为3.2G/64G = 5%。</p><ol start="2"><li><strong>如果设置了 -XX:NewRatio，这两个参数是否生效？</strong></li></ol><p>生效，比如堆大小是64G，设置 -XX:NewRatio=3，那么就等价于 -XX:G1NewSizePercent=25 并且 -XX:G1MaxNewSizePercent=25。因为年轻代：老年代 = 1 ：3，说明年轻代占1/4 = 25%。</p><ol start="3"><li><strong>如果 -XX:G1NewSizePercent 和 -XX:G1MaxNewSizePercent 只设置其中一个，那这两个参数还生效吗？</strong></li></ol><p>设置的这个参数不生效，两个参数都用默认值。</p><ol start="4"><li><strong>如果-XX:G1NewSizePercent 和 -XX:G1MaxNewSizePercent 这两个参数都生效了，什么时候动态扩容？</strong></li></ol><p>跟 -XX:GCTimeRatio 这个参数相关。这个参数为0~100之间的整数(G1默认是9, 其它收集器默认是99)，值为 n 则系统将花费不超过 1/(1+n) 的时间用于垃圾收集。因此G1默认最多 10% 的时间用于垃圾收集，如果垃圾收集时间超过10%，则触发扩容。如果扩容失败，则发起Full GC。</p><h2 id="_4-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_4-垃圾回收"><span>4 垃圾回收</span></a></h2><p>G1的垃圾收集是在 Young-Only 和 Space-Reclamation两个阶段交替执行的。如下图：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJon3pibl9cmbTCKcyRd63W9Hdz5yPfYEsVic03xxlYMkV3OOXbomH3oqg/640?wx_fmt=png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>young-only阶段会用对象逐步把老年代区域填满，space-reclamation阶段除了会回收年轻代的内存以外，还会增量回收老年代的内存。完成后重新开始young-only阶段。</p><h3 id="_4-1-young-only" tabindex="-1"><a class="header-anchor" href="#_4-1-young-only"><span>4.1 Young-only</span></a></h3><p>Young-only阶段流程如下图：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJa0oDAx2lYZ06cBPAFgpUnLfX0ib9Ig31U73SIdTWfnFAr6sqmLUIH2A/640?wx_fmt=png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个阶段从普通的 young-only GC 开始，young-only GC把一些对象移动到老年代，当老年代的空间占用达到IHOP时，G1就停止普通的young-only GC，开始初始标记(Initial Mark)。</p><ul><li>初始标记：这个过程除了普通的 young-only GC 外，还会开始并发标记过程，这个过程决定了被标记的老年代存活对象在下一次space-reclamation阶段会被保留。这个过程不会STW，有可能标记还没有结束普通的 young-only GC 就开始了。这个标记过程需要在重新标记(Remark)和清理(Cleanup)两个过程后才能结束。</li><li>重新标记: 这个过程会STW，这个过程做全局引用和类卸载。</li></ul><p>在重新标记和清理这两个阶段之间G1会并发计算对象存活信息，这个信息用于清理阶段更新内部数据结构。</p><ul><li>清理阶段：</li></ul><p>这个节点回收所有的空闲区域，并且决定是否接着执行一次space-reclamation，如果是，则仅仅执行一次单独的young-only GC，young-only阶段就结束了。</p><blockquote><p>关于IHOP，默认情况下，G1会观察标记周期内标记花了多少时间，老年代分配了多少内存，以此来自动确定一个最佳的IHOP，这叫做自适应IHOP。如果开启这个功能，因为初始时没有足够的观察数据来确定IHOP，G1会用参数 -XX:InitiatingHeapOccupancyPercent 来指定初始IHOP。可以用 -XX:-G1UseAdaptiveIHOP 参数关闭自适应IHOP，这样IHOP就参数 -XX:InitiatingHeapOccupancyPercent 指定的固定值。自适应IHOP这样设置老年代占有率,当老年代占有率=老年代最大占有率 - 参数 -XX:G1HeapReservePercent 值时，启动space-reclamation阶段的第一个Mixed GC。这里参数 -XX:G1HeapReservePercent 作为一个额外的缓存值。</p></blockquote><blockquote><p>关于标记，标记使用 SATB 算法，初始标记开始时，G1保存堆的一份虚拟镜像，这份镜像存活的对象在后续的标记过程中也被认为是存活的。这有一个问题，就是标记过程中如果部分对象死亡了，对于 space-reclamation 阶段来说它们仍然是存活的(也有少部分例外)。跟其他垃圾收集器相比，这会导致一部分死亡对象被错误保留，但是为标记阶段提供了更好的吞吐量，而且这些错误保留的对象会在下一次标记阶段被回收。</p></blockquote><p>在young-only阶段，要回收新生代的region。每一次 young-only 结束的时候，G1总是会调整新生代大小。G1可以使用参数 -XX:MaxGCPauseTimeMillis和 -XX:PauseTimeIntervalMillis 来设置目标停顿时间，这两个参数是对实际停顿时间的长期观察得来的。他会根据在GC的时候要拷贝多少个对象，对象之间是如何相互关联的等信息计算出来回收相同大小的新生代内存需要花费多少时间，</p><p>如果没有其他的限定条件，G1会把young区的大小调整为 -XX:G1NewSizePercent和 -XX:G1MaxNewSizePercent 之间的值来满足停顿时间的要求。</p><h3 id="_4-2-space-reclamation" tabindex="-1"><a class="header-anchor" href="#_4-2-space-reclamation"><span>4.2 Space-reclamation</span></a></h3><p>这个阶段由多个Mixed GC组成，不光回收年轻代垃圾，也回收老年代垃圾。当 G1 发现回收更多的老年代区域不能释放更多空闲空间时，这个阶段结束。之后，周期性地再次开启一个新的Young-only阶段。</p><p>当G1收集存活对象信息时内存不足，G1会做一个Full GC，并且会STW。</p><p>在 space-reclamation 阶段，G1会尽量在GC停顿时间内回收尽可能多的老年代内存。这个阶段新生代内存大小被调整为 -XX:G1NewSizePercent 设置的允许的最小值，只要存在可回收的老年代region就会被添加到回收集合中，直到再添加会超出目标停顿时间为止。在特定的某个GC停顿时间内，G1会按照这老年代region回收的效率(效率高的优先收集)和剩余可用时间来得到最终待回收region集合。</p><p>每一个GC停顿期间要回收的老年代region数量受限于候选region集合数量除以 -XX:G1MixedGCCountTarget 这个参数值，参数 -XX:G1MixedGCCountTarget 指定一个周期内触发Mixed GC最大次数，默认值8。比如 -XX:G1MixedGCCountTarget 采用默认值8，候选region集合有200个region，那每次停顿期间收集25个region。</p><blockquote><p>候选region集合是老年代中所有占用率低于 -XX:G1MixedGCLiveThresholdPercent 的region。</p></blockquote><p>当待回收region集合中可回收的空间占用率低于参数值 -XX:G1HeapWastePercent 的时候，Space-Reclamation结束。</p><h3 id="_4-3-内存紧张情况" tabindex="-1"><a class="header-anchor" href="#_4-3-内存紧张情况"><span>4.3 内存紧张情况</span></a></h3><p>当应用存活对象占用了大量内存，以至于回收剩余对象没有足够的空间拷贝时，就会触发 evacuation failure。这时G1为了完成当前的垃圾收集，会保留已经位于新的位置上的存活对象不动，对于没有移动和拷贝的对象就不会进行拷贝了，仅仅调整对象间的引用。</p><p>evacuation failure会导致一些额外的开销，但是一般会跟其他 young GC 一样快。evacuation failure完成以后，G1会跟正常情况下一样继续恢复应用的执行。G1会假设 evacuation failure是发生在GC的后期，这时大部分对象已经移动过了，并且已经有足够的内存来继续执行应用程序一直到 mark 结束 space-reclamation 开始。如果这个假设不成立(也就是说没有足够的内存来执行应用程序)，G1最终只能发起Full GC，对整个堆做压缩，这个过程可能会非常慢。</p><h2 id="_5-跟其他收集器比较" tabindex="-1"><a class="header-anchor" href="#_5-跟其他收集器比较"><span>5 跟其他收集器比较</span></a></h2><h3 id="_5-1-parallel-gc" tabindex="-1"><a class="header-anchor" href="#_5-1-parallel-gc"><span>5.1 Parallel GC</span></a></h3><p>Parallel GC 可以压缩和回收老年代的内存，但是也只能对老年代整体来操作。G1以增量的方式把整个GC工作增量的分散到多个更短的停顿时间中，当然这可能会牺牲一定吞吐量。</p><h3 id="_5-2-cms" tabindex="-1"><a class="header-anchor" href="#_5-2-cms"><span>5.2 CMS</span></a></h3><p>跟CMS类似，G1并发回收老年代内存，但是，CMS采用标记-清除算法，不会处理老年代的内存碎片，最终就会导致长时间的FullGC。</p><h3 id="_5-3-g1问题" tabindex="-1"><a class="header-anchor" href="#_5-3-g1问题"><span>5.3 G1问题</span></a></h3><p>因为采用并发收集，G1的性能开销会更大，这可能会影响吞吐量。</p><h3 id="_5-4-g1优势" tabindex="-1"><a class="header-anchor" href="#_5-4-g1优势"><span>5.4 G1优势</span></a></h3><p>G1在任何的GC期间都可以回收老年代中全空或者占用大空间的内存。这可以避免一些不必要的GC，因为可以非常轻易地释放大量的内存空间。这个功能默认开启，可以采用 -XX:-G1EagerReclaimHumongousObjects 参数关闭。</p><p>G1可以选择对整个堆里面的String进行并行去重。这个功能默认关闭，可以使用参数 -XX:+G1EnableStringDeduplication 来开启。</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6 总结</span></a></h2><p>本文详细介绍了G1垃圾收集器，希望能够对你理解G1有所帮助。</p><p>参考:</p><ol><li>https://docs.oracle.com/javase/10/gctuning/garbage-first-garbage-collector.htm#JSGCT-GUID-CE6F94B6-71AF-45D5-829E-DEADD9BA929D</li><li>https://mp.weixin.qq.com/s/KkA3c2_AX6feYPJRhnPOyQ</li></ol><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/rVS5TBRU9QcnMNdBz6w_Mg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/rVS5TBRU9QcnMNdBz6w_Mg</a>，整理：沉默王二</p></blockquote>',86)]))}const g=i(t,[["render",r],["__file","xzbztdncdlxgljsjq.html.vue"]]),s=JSON.parse('{"path":"/nice-article/weixin/xzbztdncdlxgljsjq.html","title":"【修正版】5张图带你彻底理解G1垃圾收集器","lang":"zh-CN","frontmatter":{"title":"【修正版】5张图带你彻底理解G1垃圾收集器","shortTitle":"【修正版】5张图带你彻底理解G1垃圾收集器","description":"作为一款高效的垃圾收集器，G1在JDK7中加入JVM，在JDK9中取代CMS成为了默认的垃圾收集器。1 垃圾","author":"jinjunzhu","category":["微信公众号"],"head":[["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/nice-article/weixin/xzbztdncdlxgljsjq.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"【修正版】5张图带你彻底理解G1垃圾收集器"}],["meta",{"property":"og:description","content":"作为一款高效的垃圾收集器，G1在JDK7中加入JVM，在JDK9中取代CMS成为了默认的垃圾收集器。1 垃圾"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdicNg1QXA7Ribhb0pfzpGBLZGdZlBP3PMNu2ePDEAAVZuaSNnfSgCmibhOBoFTjRgJ03XeYV2OiaA2cGg/640?wx_fmt=png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"jinjunzhu"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【修正版】5张图带你彻底理解G1垃圾收集器\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdicNg1QXA7Ribhb0pfzpGBLZGdZlBP3PMNu2ePDEAAVZuaSNnfSgCmibhOBoFTjRgJ03XeYV2OiaA2cGg/640?wx_fmt=png\\",\\"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJmV3TwviaoB7vicS8cGicZNJuK2C6OSZ0rru3PFMNt6CsaLfiaylVOH26Kw/640?wx_fmt=png\\",\\"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJ3sG7a9vDPHyG9EsSTFzOTp6Gib8M2icliaG8KjicVR3hLtq6UPuOHg0VDA/640?wx_fmt=png\\",\\"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJon3pibl9cmbTCKcyRd63W9Hdz5yPfYEsVic03xxlYMkV3OOXbomH3oqg/640?wx_fmt=png\\",\\"https://mmbiz.qpic.cn/mmbiz_png/a1gicTYmvicdibngxYs4dUUdTnEJw56yPIJa0oDAx2lYZ06cBPAFgpUnLfX0ib9Ig31U73SIdTWfnFAr6sqmLUIH2A/640?wx_fmt=png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jinjunzhu\\"}]}"]]},"headers":[{"level":2,"title":"1 垃圾收集器回顾","slug":"_1-垃圾收集器回顾","link":"#_1-垃圾收集器回顾","children":[{"level":3,"title":"1.1 新生代","slug":"_1-1-新生代","link":"#_1-1-新生代","children":[]},{"level":3,"title":"1.1 老年代","slug":"_1-1-老年代","link":"#_1-1-老年代","children":[]}]},{"level":2,"title":"2 G1介绍","slug":"_2-g1介绍","link":"#_2-g1介绍","children":[{"level":3,"title":"2.1 初识G1","slug":"_2-1-初识g1","link":"#_2-1-初识g1","children":[]},{"level":3,"title":"2.2 堆布局","slug":"_2-2-堆布局","link":"#_2-2-堆布局","children":[]},{"level":3,"title":"2.3 关于region","slug":"_2-3-关于region","link":"#_2-3-关于region","children":[]},{"level":3,"title":"2.4 大对象","slug":"_2-4-大对象","link":"#_2-4-大对象","children":[]}]},{"level":2,"title":"3 内存分配","slug":"_3-内存分配","link":"#_3-内存分配","children":[]},{"level":2,"title":"4 垃圾回收","slug":"_4-垃圾回收","link":"#_4-垃圾回收","children":[{"level":3,"title":"4.1 Young-only","slug":"_4-1-young-only","link":"#_4-1-young-only","children":[]},{"level":3,"title":"4.2 Space-reclamation","slug":"_4-2-space-reclamation","link":"#_4-2-space-reclamation","children":[]},{"level":3,"title":"4.3 内存紧张情况","slug":"_4-3-内存紧张情况","link":"#_4-3-内存紧张情况","children":[]}]},{"level":2,"title":"5 跟其他收集器比较","slug":"_5-跟其他收集器比较","link":"#_5-跟其他收集器比较","children":[{"level":3,"title":"5.1 Parallel GC","slug":"_5-1-parallel-gc","link":"#_5-1-parallel-gc","children":[]},{"level":3,"title":"5.2 CMS","slug":"_5-2-cms","link":"#_5-2-cms","children":[]},{"level":3,"title":"5.3 G1问题","slug":"_5-3-g1问题","link":"#_5-3-g1问题","children":[]},{"level":3,"title":"5.4 G1优势","slug":"_5-4-g1优势","link":"#_5-4-g1优势","children":[]}]},{"level":2,"title":"6 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1703660241000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":14.01,"words":4204},"filePathRelative":"nice-article/weixin/xzbztdncdlxgljsjq.md","localizedDate":"2023年12月27日","excerpt":"<p>作为一款高效的垃圾收集器，G1在JDK7中加入JVM，在JDK9中取代CMS成为了默认的垃圾收集器。</p>\\n<h2>1 垃圾收集器回顾</h2>\\n<h3>1.1 新生代</h3>\\n<p>新生代采用复制算法，主要的垃圾收集器有三个，Serial、Parallel New 和 Parallel Scavenge，特性如下：</p>\\n<ul>\\n<li>Serial:单线程收集器，串行方式运行，GC 进行时，其他线程都会停止工作。在单核 CPU 下，收集效率最高。</li>\\n<li>Parallel New：Serial 的多线程版本，新生代默认收集器。在多核 CPU 下，效率更高，可以跟CMS收集器配合使用。</li>\\n<li>Parallel Scavenge：多线程收集器，更加注重吞吐量，适合交互少的任务，不能跟 CMS 配合使用。</li>\\n</ul>"}');export{g as comp,s as data};
