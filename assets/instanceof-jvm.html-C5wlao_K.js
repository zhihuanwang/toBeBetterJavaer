import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-BeHkqkE2.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>小二那天去面试，碰到了这个问题：“<strong>instanceof 关键字是如何实现的</strong>？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。</p><p>我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。”</p><blockquote><p>作者：RednaxelaFX，整理：沉默王二，链接：<a href="https://www.zhihu.com/question/21574535/answer/18998914" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/21574535/answer/18998914</a></p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="场景一-月薪-3000-元一下的码农职位" tabindex="-1"><a class="header-anchor" href="#场景一-月薪-3000-元一下的码农职位"><span>场景一：月薪 3000 元一下的码农职位</span></a></h2><p>用 Java 伪代码来表现instanceof关键字在Java语言规范所描述的运行时语义，是这样的：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// obj instanceof T</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      T</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (T) obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // checkcast</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClassCastException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用中文说就是：如果有表达式 <code>obj instanceof T</code>，那么如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</p><p>如果面试官说“这不是废话嘛”，进入场景二。</p><h2 id="场景二-月薪6000-8000的java研发职位" tabindex="-1"><a class="header-anchor" href="#场景二-月薪6000-8000的java研发职位"><span>场景二：月薪6000-8000的Java研发职位</span></a></h2><p>JVM有一条名为 instanceof 的指令，而Java源码编译到Class文件时会把Java语言中的 instanceof 运算符映射到JVM的 instanceof 指令上。</p><p>javac是这样做的：</p><ul><li>instanceof 是javac能识别的一个关键字，对应到Token.INSTANCEOF的token类型。做词法分析的时候扫描到&quot;instanceof&quot;关键字就映射到了一个Token.INSTANCEOF token。</li><li>该编译器的抽象语法树节点有一个JCTree.JCInstanceOf类用于表示instanceof运算。做语法分析的时候解析到<a href="https://javabetter.cn/basic-extra-meal/instanceof.html" target="_blank" rel="noopener noreferrer">instanceof运算符</a>就会生成这个JCTree.JCInstanceof类型的节点。</li><li>中途还得根据Java语言规范对instanceof运算符的编译时检查的规定把有问题的情况找出来。</li><li>到最后生成字节码的时候为JCTree.JCInstanceof节点生成instanceof字节码指令。</li></ul><p>回答到这层面就已经能解决好些实际问题了，如果面试官还说，“这不还是废话嘛”，进入场景三。</p><h2 id="场景三-月薪10000的java高级研发职位" tabindex="-1"><a class="header-anchor" href="#场景三-月薪10000的java高级研发职位"><span>场景三：月薪10000的Java高级研发职位</span></a></h2><p>先简单介绍一下instanceof的字节码：</p><ul><li>操作：确定对象是否为给定的类型</li><li>指令格式：instanceof|indexbyte1|indexbyte2</li><li>指令执行前后的栈顶状态： <ul><li>……，objectref=&gt;</li><li>……，result</li></ul></li></ul><p>再简单描述下：indexbyte1和indexbyte2用于构造对当前类的常量池的索引，objectref为reference类型，可以是某个类，数组的实例或者是接口。</p><p>基本的实现过程：对indexbyte1和indexbyte2构造的常量池索引进行解析，然后根据java规范判断解析的类是不是objectref的一个实例，最后在栈顶写入结果。</p><p>基本上就是根据规范来 YY 下实现，就能八九不离十蒙混过关了。</p><p>如果面试官还不满意，进入场景四。</p><h2 id="场景四-月薪10000以上的java资深研发职位" tabindex="-1"><a class="header-anchor" href="#场景四-月薪10000以上的java资深研发职位"><span>场景四：月薪10000以上的Java资深研发职位</span></a></h2><p>这个岗位注重性能调优什么的，R 大说可以上论文了：</p><blockquote><p><a href="https://dl.acm.org/doi/10.1145/583810.583821" target="_blank" rel="noopener noreferrer">https://dl.acm.org/doi/10.1145/583810.583821</a></p></blockquote><p>论文我也看不懂，所以这里就不 BB 了。（逃</p><p>篇论文描述了HotSpot VM做子类型判断的算法，这里简单补充一下JDK6至今的HotSpot VM实际采用的算法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_subtype_of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> off </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (S </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> T) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (T </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[off]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (off </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cache) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ( </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scan_secondary_subtype_array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HotSpot VM的两个编译器，Client Compiler (C1) 与 Server Compiler (C2) 各自对子类型判断的实现有更进一步的优化。实际上在JVM里，instanceof的功能就实现了4份，VM runtime、解释器、C1、C2各一份。</p><p>VM runtime的：</p><blockquote><p><a href="http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp" target="_blank" rel="noopener noreferrer">http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp</a></p></blockquote><p>分享的最后，二哥简单来说一下。</p><p>这个问题涉及语法细节，涉及jvm实现，涉及编译器，还涉及一点点数据结构设计，比较考验一个 Java 程序员的内功，如果要回答到论文的程度，那真的是，面试官也得提前备好知识点，不然应聘者的回答啥也听不懂就挺尴尬的。</p><p>反正 R 大回答里的很多细节我都是第一次听，逃了逃了。。。。。。</p><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括Java基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,38)]))}const k=s(t,[["render",l],["__file","instanceof-jvm.html.vue"]]),o=JSON.parse('{"path":"/basic-extra-meal/instanceof-jvm.html","title":"Java中的instanceof关键字是如何实现的？","lang":"zh-CN","frontmatter":{"title":"Java中的instanceof关键字是如何实现的？","shortTitle":"instanceof关键字是如何实现的？","category":["Java核心"],"tag":["Java重要知识点"],"description":"二哥的Java进阶之路，小白的零基础Java教程，从入门到进阶，Java中的instanceof关键字是如何实现的？","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,二哥的Java进阶之路,Java进阶之路,Java入门,教程,java,instanceof"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/basic-extra-meal/instanceof-jvm.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"Java中的instanceof关键字是如何实现的？"}],["meta",{"property":"og:description","content":"二哥的Java进阶之路，小白的零基础Java教程，从入门到进阶，Java中的instanceof关键字是如何实现的？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java重要知识点"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的instanceof关键字是如何实现的？\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.gif\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"场景一：月薪 3000 元一下的码农职位","slug":"场景一-月薪-3000-元一下的码农职位","link":"#场景一-月薪-3000-元一下的码农职位","children":[]},{"level":2,"title":"场景二：月薪6000-8000的Java研发职位","slug":"场景二-月薪6000-8000的java研发职位","link":"#场景二-月薪6000-8000的java研发职位","children":[]},{"level":2,"title":"场景三：月薪10000的Java高级研发职位","slug":"场景三-月薪10000的java高级研发职位","link":"#场景三-月薪10000的java高级研发职位","children":[]},{"level":2,"title":"场景四：月薪10000以上的Java资深研发职位","slug":"场景四-月薪10000以上的java资深研发职位","link":"#场景四-月薪10000以上的java资深研发职位","children":[]}],"git":{"createdTime":1649840019000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":4.28,"words":1285},"filePathRelative":"basic-extra-meal/instanceof-jvm.md","localizedDate":"2022年4月13日","excerpt":"<p>小二那天去面试，碰到了这个问题：“<strong>instanceof 关键字是如何实现的</strong>？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。</p>\\n<p>我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。”</p>\\n<blockquote>\\n<p>作者：RednaxelaFX，整理：沉默王二，链接：<a href=\\"https://www.zhihu.com/question/21574535/answer/18998914\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.zhihu.com/question/21574535/answer/18998914</a></p>\\n</blockquote>"}');export{k as comp,o as data};
