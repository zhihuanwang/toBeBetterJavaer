import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as s,o as t}from"./app-BeHkqkE2.js";const n={};function r(l,e){return t(),i("div",null,e[0]||(e[0]=[s(`<h1 id="第十七节-内存泄露排查优化实战" tabindex="-1"><a class="header-anchor" href="#第十七节-内存泄露排查优化实战"><span>第十七节：内存泄露排查优化实战</span></a></h1><p><code>OutOfMemoryError</code>，也就是臭名昭著的 OOM（内存溢出），相信很多球友都遇到过，相对于常见的业务异常，如<a href="https://javabetter.cn/array/array.html" target="_blank" rel="noopener noreferrer">数组越界</a>、<a href="https://javabetter.cn/exception/npe.html" target="_blank" rel="noopener noreferrer">空指针</a>等，OOM 问题更难难定位和解决。</p><p>这篇内容就以之前碰到的一次线上内存溢出的定位、解决问题的方式展开；希望能对碰到类似问题的<a href="https://javabetter.cn/zhishixingqiu/" target="_blank" rel="noopener noreferrer">球友</a>带来思路和帮助。</p><p>主要从<code>表现--&gt;排查--&gt;定位--&gt;解决</code> 四个步骤来分析和解决问题。</p><h2 id="内存溢出和内存泄露" tabindex="-1"><a class="header-anchor" href="#内存溢出和内存泄露"><span>内存溢出和内存泄露</span></a></h2><p>在 Java 中，和内存相关的问题主要有两种，内存溢出和内存泄漏。</p><ul><li><strong>内存溢出</strong>（Out Of Memory）：就是申请内存时，JVM 没有足够的内存空间。通俗说法就是去蹲坑发现坑位满了。</li><li><strong>内存泄露</strong>（Memory Leak）：就是申请了内存，但是没有释放，导致内存空间浪费。通俗说法就是有人占着茅坑不拉屎。</li></ul><h3 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出"><span>内存溢出</span></a></h3><p>在 JVM 的<a href="https://javabetter.cn/jvm/neicun-jiegou.html" target="_blank" rel="noopener noreferrer">内存区域</a>中，除了程序计数器，其他的内存区域都有可能发生内存溢出。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20231227111238.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>大家都知道，Java 堆中存储的都是对象，或者叫对象实例，那只要我们不断地创建对象，并且保证 GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么就一定会产生内存溢出。</p><p>比如说运行下面这段代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序的时候记得设置一下 VM 参数：<code>-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</code>，限制堆内存大小为 20M，并且不允许扩展，并且当发生 OOM 时 <a href="https://javabetter.cn/jvm/console-tools.html" target="_blank" rel="noopener noreferrer">dump 出当前内存的快照</a>。</p><p>运行结果如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/oom-20240109190409.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在讲<a href="https://javabetter.cn/jvm/neicun-jiegou.html" target="_blank" rel="noopener noreferrer">运行时数据区</a>的时候也曾讲过。</p><h3 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露"><span>内存泄露</span></a></h3><p>内存泄露是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><p>简单来说，就是应该被<a href="https://javabetter.cn/jvm/gc.html" target="_blank" rel="noopener noreferrer">垃圾回收</a>的对象没有回收掉，导致占用的内存越来越多，最终导致内存溢出。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/oom-20240109190934.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中：对象 X 引用对象 Y，X 的生命周期比 Y 的生命周期长，Y 生命周期结束的时候，垃圾回收器不会回收对象 Y。</p><p>来看下面的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MemoryLeak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">          Connection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> conn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">          Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          conn </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DriverManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">          Statement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">conn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">          ResultSet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">stmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">executeQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;....&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（Exception e）{</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//异常日志</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 1．关闭结果集 Statement</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 2．关闭声明的对象 ResultSet</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 3．关闭连接 Connection</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建的连接不再使用时，需要调用 close 方法关闭连接，只有连接被关闭后，GC 才会回收对应的对象（Connection，Statement，ResultSet，Session）。忘记关闭这些资源会导致持续占有内存，无法被 GC 回收。</p><p>这样就会导致内存泄露，最终导致内存溢出。</p><p>换句话说，内存泄露不是内存溢出，但会加快内存溢出的发生。</p><h2 id="内存溢出后的表象" tabindex="-1"><a class="header-anchor" href="#内存溢出后的表象"><span>内存溢出后的表象</span></a></h2><p>之前生产环境爆出的内存溢出问题会随着业务量的增长，出现的频次也越来越高。</p><p>应用程序的业务逻辑非常简单，就是从 <a href="https://javabetter.cn/mq/kafka.html" target="_blank" rel="noopener noreferrer">Kafka</a> 中将数据消费下来，然后批量的做持久化操作。</p><p>OOM 现象则是随着 Kafka 的消息越多，出现异常的频次就越快。由于当时还有其他工作所以只能让运维做重启，并且监控好堆内存以及 <a href="https://javabetter.cn/jvm/gc.html" target="_blank" rel="noopener noreferrer">GC 情况</a>。</p><blockquote><p>不得不说，重启大法真的好，能解决大量的问题，但不是长久之计。</p></blockquote><h2 id="内存泄露的排查" tabindex="-1"><a class="header-anchor" href="#内存泄露的排查"><span>内存泄露的排查</span></a></h2><p>于是我们想根据运维之前收集到的内存数据、GC 日志尝试判断哪里出现了问题。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-81051388-0c35-4de6-a3d9-4f546ef4bfec.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结果发现<a href="https://javabetter.cn/jvm/compile-jdk.html" target="_blank" rel="noopener noreferrer">老年代</a>的内存使用就算是发生 GC 也一直居高不下，而且随着时间推移也越来越高。</p><p>结合 <a href="https://javabetter.cn/jvm/console-tools.html" target="_blank" rel="noopener noreferrer">jstat</a> 的日志发现就算是发生了 FGC，老年代也回收不了，内存已经到顶。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-e79d4da0-fbb1-4918-a8d8-e29d2d64323b.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>甚至有几台应用 FGC 达到了上百次，时间也高的可怕。</p><p>这说明应用的内存使用肯定是有问题的，有许多赖皮对象始终回收不掉。</p><h2 id="内存泄露的定位" tabindex="-1"><a class="header-anchor" href="#内存泄露的定位"><span>内存泄露的定位</span></a></h2><p>由于生产上的内存 dump 文件非常大，达到了几十 G。也和我们生产环境配置的内存太大有关。</p><p>所以导致想使用 <a href="https://eclipse.dev/mat/" target="_blank" rel="noopener noreferrer">MAT</a> 分析需要花费大量时间。</p><blockquote><p>MAT 是 Eclipse 的一个插件，也可以单独使用，可以用来分析 Java 的堆内存，找出内存泄露的原因。</p></blockquote><p>因此我们就想是否可以在本地复现，这样就好定位的多。</p><p>为了尽快的复现问题，我将本地应用最大堆内存设置为 150M。然后在消费 Kafka 那里 Mock 了一个 while 循环一直不断的生成数据。</p><p>同时当应用启动之后利用 <a href="https://javabetter.cn/jvm/view-tools.html" target="_blank" rel="noopener noreferrer">VisualVM</a> 连上应用实时监控内存、GC 的使用情况。</p><p>结果跑了 10 几分钟内存使用并没有什么问题。根据图中可以看出，每一次 GC 内存都能有效的回收，所以并没有复现问题。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-4cf05af0-924f-406b-a8a4-5aa885e38cea.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>没法复现问题就很难定位。于是我们就采用了一种古老的方法——review 代码，发现生产的逻辑和我们用 while 循环 Mock 的数据还不太一样。</p><blockquote><p>果然 review 代码是保障程序性能的第一道防线，诚不欺我。大家在写完代码的时候，尽量也要团队 review 一次。</p></blockquote><p>后来查看生产日志发现每次从 Kafka 中取出的都是几百条数据，而我们 Mock 时每次只能产生<strong>一条</strong>。</p><p>为了尽可能的模拟生产情况便在服务器上跑了一个生产者程序，一直源源不断的向 Kafka 中发送数据。</p><p>果然不出意外只跑了一分多钟内存就顶不住了，观察下图发现 GC 的频次非常高，但是内存的回收却是相形见拙。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-a6d6c9cd-e79c-4a76-ba97-032cfefefd5f.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时后台也开始打印内存溢出了，这样便复现出了问题。</p><h2 id="内存泄露的解决" tabindex="-1"><a class="header-anchor" href="#内存泄露的解决"><span>内存泄露的解决</span></a></h2><p>从目前的表现来看，就是内存中有许多对象一直存在强引用关系导致得不到回收。</p><p>于是便想看看到底是什么对象占用了这么多的内存，利用 VisualVM 的 HeapDump 功能，就可以立即 dump 出当前应用的内存情况。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-49b47ca3-b3e2-49f7-85c9-23f7a3ef6f93.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结果发现 <code>com.lmax.disruptor.RingBuffer</code> 类型的对象占用了将近 50% 的内存。</p><p>看到这个包自然就想到了 <code>Disruptor</code> 环形队列了。</p><blockquote><p><a href="https://tech.meituan.com/2016/11/18/disruptor.html" target="_blank" rel="noopener noreferrer">Disruptor</a> 是一个高性能的异步处理框架，它的核心思想是：通过<a href="https://javabetter.cn/thread/lock.html" target="_blank" rel="noopener noreferrer">无锁</a>的方式来实现高性能的并发处理，其性能是高于 JDK 的 <a href="https://javabetter.cn/thread/BlockingQueue.html" target="_blank" rel="noopener noreferrer">BlockingQueue</a> 的。</p></blockquote><p>再次 review 代码发现：从 Kafka 里取出的 700 条数据是直接往 Disruptor 里丢的。</p><p>这里也就能说明为什么第一次模拟数据没复现问题了。</p><p>模拟的时候是一个对象放进队列里，而生产的情况是 700 条数据放进队列里。这个数据量就是 700 倍的差距啊。</p><p>而 Disruptor 作为一个环形队列，在对象没有被覆盖之前是一直存在的。</p><p>我也做了一个实验，证明确实如此。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-dee49da6-905a-4085-b82e-41e136d422e8.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我设置队列大小为 8 ，从 0~9 往里面写 10 条数据，当写到 8 的时候就会把之前 0 的位置覆盖掉，后面的以此类推（类似于 <a href="https://javabetter.cn/collection/hashmap.html" target="_blank" rel="noopener noreferrer">HashMap</a> 的取模定位）。</p><p>所以在生产环境上，假设我们的队列大小是 1024，那么随着系统的运行最终会导致 1024 个位置上装满了对象，而且每个位置都是 700 个！</p><p>于是查看了生产环境上 Disruptor 的 RingBuffer 配置，结果是：<code>1024*1024</code>。</p><p>这个数量级就非常吓人了。</p><p>为了验证是否是这个问题，我在本地将该值设为 2 ，一个最小值试试。</p><p>同样的 128M 内存，也是通过 Kafka 一直源源不断的取出数据。通过监控如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-5529781f-1f68-47a7-a3d2-04eba9e9d52e.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>跑了 20 几分钟系统一切正常，每当一次 GC 都能回收大部分内存，最终呈现锯齿状。</p><p>这样问题就找到了，不过生产上这个值具体设置多少还得根据业务情况测试才能知道，但原有的 1024*1024 是绝对不能再使用了。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>虽然到了最后也就改了一行代码(还没改，直接修改配置)，但这个排查过程我觉得是很有意义的。</p><p>也会让大部分觉得 JVM 这样的黑盒难以下手的球友有一个直观感受。</p><p><code>同时也得感叹 Disruptor 东西虽好，也不能乱用哦！</code></p><p>相关演示代码查看：</p><blockquote><p><a href="https://github.com/crossoverJie/JCSprout/tree/master/src/main/java/com/crossoverjie/disruptor" target="_blank" rel="noopener noreferrer">https://github.com/crossoverJie/JCSprout/tree/master/src/main/java/com/crossoverjie/disruptor</a></p></blockquote><ul><li>参考链接 1：<a href="https://crossoverjie.top/2018/08/29/java-senior/OOM-Disruptor/" target="_blank" rel="noopener noreferrer">内存泄露的排查</a></li><li>参考链接 2：<a href="https://www.zhihu.com/question/40560123" target="_blank" rel="noopener noreferrer">内存溢出和内存泄露</a></li></ul><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括 Java 基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,89)]))}const o=a(n,[["render",r],["__file","oom.html.vue"]]),k=JSON.parse('{"path":"/jvm/oom.html","title":"一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM","lang":"zh-CN","frontmatter":{"title":"一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM","shortTitle":"内存泄露排查优化实战","category":["Java核心"],"tag":["Java虚拟机"],"description":"本文介绍了一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,内存溢出"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/jvm/oom.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM"}],["meta",{"property":"og:description","content":"本文介绍了一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20231227111238.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一次内存溢出的排查优化实战，彻底干掉臭名昭著的 OOM\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20231227111238.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/oom-20240109190409.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/oom-20240109190934.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-81051388-0c35-4de6-a3d9-4f546ef4bfec.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-e79d4da0-fbb1-4918-a8d8-e29d2d64323b.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-4cf05af0-924f-406b-a8a4-5aa885e38cea.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-a6d6c9cd-e79c-4a76-ba97-032cfefefd5f.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-49b47ca3-b3e2-49f7-85c9-23f7a3ef6f93.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-dee49da6-905a-4085-b82e-41e136d422e8.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/oom-5529781f-1f68-47a7-a3d2-04eba9e9d52e.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"内存溢出和内存泄露","slug":"内存溢出和内存泄露","link":"#内存溢出和内存泄露","children":[{"level":3,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[]},{"level":3,"title":"内存泄露","slug":"内存泄露","link":"#内存泄露","children":[]}]},{"level":2,"title":"内存溢出后的表象","slug":"内存溢出后的表象","link":"#内存溢出后的表象","children":[]},{"level":2,"title":"内存泄露的排查","slug":"内存泄露的排查","link":"#内存泄露的排查","children":[]},{"level":2,"title":"内存泄露的定位","slug":"内存泄露的定位","link":"#内存泄露的定位","children":[]},{"level":2,"title":"内存泄露的解决","slug":"内存泄露的解决","link":"#内存泄露的解决","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648406568000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":8.9,"words":2670},"filePathRelative":"jvm/oom.md","localizedDate":"2022年3月27日","excerpt":"\\n<p><code>OutOfMemoryError</code>，也就是臭名昭著的 OOM（内存溢出），相信很多球友都遇到过，相对于常见的业务异常，如<a href=\\"https://javabetter.cn/array/array.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数组越界</a>、<a href=\\"https://javabetter.cn/exception/npe.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">空指针</a>等，OOM 问题更难难定位和解决。</p>\\n<p>这篇内容就以之前碰到的一次线上内存溢出的定位、解决问题的方式展开；希望能对碰到类似问题的<a href=\\"https://javabetter.cn/zhishixingqiu/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">球友</a>带来思路和帮助。</p>"}');export{o as comp,k as data};
