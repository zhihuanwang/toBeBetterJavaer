import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as r}from"./app-BeHkqkE2.js";const o={};function n(b,e){return r(),a("div",null,e[0]||(e[0]=[i(`<h1 id="dubbo-17道精选高频面试题必看" tabindex="-1"><a class="header-anchor" href="#dubbo-17道精选高频面试题必看"><span>Dubbo：17道精选高频面试题必看👍</span></a></h1><p><strong>目录</strong></p><ul><li>1.Dubbo 是什么？RPC 又是什么？</li><li>2. Dubbo 能做什么？</li><li>3.能说下 Dubbo 的总体的调用过程吗？</li><li>4.说说 Dubbo 支持哪些协议，每种协议的应用场景和优缺点</li><li>5.Dubbo 中都用到哪些设计模式？</li><li>6.如果 Dubbo 中 provider 提供的服务由多个版本怎么办？</li><li>7.服务暴露的流程是怎么样的？</li><li>8.服务引用的流程是怎么样的？</li><li>9.Dubbo 的注册中心有哪些？</li><li>10.聊聊 Dubbo SPI 机制？</li><li>11.Dubbo 的 SPi 和 JAVA 的 SPI 有什么区别？</li><li>12.有哪些负载均衡策略？</li><li>13.集群容错方式有哪些？</li><li>14.说说 Dubbo 的分层？</li><li>15.服务提供者能实现失效踢出是什么原理？</li><li>16.为什么要通过代理对象通信？？</li><li>17.怎么设计一个 RPC 框架？</li></ul><hr><h2 id="_1-dubbo-是什么-rpc-又是什么" tabindex="-1"><a class="header-anchor" href="#_1-dubbo-是什么-rpc-又是什么"><span>1.Dubbo 是什么？RPC 又是什么？</span></a></h2><p><strong>Dubbo 是一个分布式服务框架</strong>，致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。</p><blockquote><p><strong>RPC（Remote Procedure Call）</strong>—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底&gt;层网络技术的协议。RPC 协议假定某些传输协议的存在，如 TCP 或 UDP，为通信程序之间携带信息数据。在 OSI 网络&gt;通信模型中，RPC 跨越了传输层和应用层。RPC 使得开发包括网络分布式多程序在内的应用程序更加容易。RPC 采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发&gt;送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为&gt;止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户&gt;端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。有多种 RPC 模式和执行。</p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-30098e26-c2c6-463b-bdb8-4cec95a9b6f8.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们用一种通俗易懂的语言解释它，<strong>远程调用就是本地机器调用远程机器的一个方法，远程机器返回结果的过程</strong>。</p><p><strong>为什么要这么做？</strong></p><p>主要原因是由于单台服务的性能已经无法满足我们了，在这个流量剧增的时代，只有<strong>多台服务器</strong>才能支撑起来现有的用户体系，</p><p>而在这种体系下，服务越来越多，逐渐演化出了现在这种微服务化的 RPC 框架。</p><hr><h2 id="_2-dubbo-能做什么" tabindex="-1"><a class="header-anchor" href="#_2-dubbo-能做什么"><span>2. Dubbo 能做什么？</span></a></h2><p>Dubbo 的核心功能主要包含:</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-78d6db3f-70c7-4ebb-90cb-5b731e77019e.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>远程通讯:dubbo-remoting</strong>模块， 提供对多种基于长连接的 NIO 框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</p></li><li><p><strong>集群容错</strong>: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</p></li><li><p><strong>自动发现</strong>: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</p></li></ol><h2 id="_3-能说下-dubbo-的总体的调用过程吗" tabindex="-1"><a class="header-anchor" href="#_3-能说下-dubbo-的总体的调用过程吗"><span>3.能说下 Dubbo 的总体的调用过程吗？</span></a></h2><p>调用过程图：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-4814068d-19cc-42d9-b9bc-26c4c063c8c2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>1.Proxy 持有一个 Invoker 对象，<strong>使用 Invoker 调用</strong></li><li>2.之后通过<strong>Cluster 进行负载容错</strong>，失败重试</li><li>3.调用 Directory<strong>获取远程服务的 Invoker</strong>列表</li><li>4.负载均衡 <ul><li>用户<strong>配置了路由规则</strong>，则根据路由规则过滤获取到的 Invoker 列表</li><li>用户没<strong>有配置路由规则或配置路由后还有很多节点</strong>，则使用 LoadBalance 方法做负载均衡，选用一个可以调用的 Invoker</li></ul></li><li>5.<strong>经过一个一个过滤器链</strong>，通常是处理上下文、限流、计数等。</li><li>6.会<strong>使用 Client 做数据传输</strong></li><li>7.<strong>私有化协议的构造</strong>(Codec)</li><li>8.进行<strong>序列化</strong></li><li>9.服务端收到这个 Request 请求，将其<strong>分配到 ThreadPool</strong>中进行处理</li><li>10.<strong>Server 来处理这些 Request</strong></li><li>11.根据<strong>请求查找对应的 Exporter</strong></li><li>12.之后<strong>经过</strong>一个服务提供者端的<strong>过滤器链</strong></li><li>13.然后找到接口实现并<strong>真正的调用</strong>，将请求结果返回</li></ul><h2 id="_4-说说-dubbo-支持哪些协议-每种协议的应用场景和优缺点" tabindex="-1"><a class="header-anchor" href="#_4-说说-dubbo-支持哪些协议-每种协议的应用场景和优缺点"><span>4.说说 Dubbo 支持哪些协议，每种协议的应用场景和优缺点</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-1f4771de-fad0-410c-a764-c173146dd6d7.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>1.dubbo</strong> 单一长连接和 NIO 异步通讯，适合大并发小数据量的服务调用，以及消费者远大于提供者。传输协议 TCP，异步，Hessian 序列化</li><li><strong>2.rmi</strong> 采用 JDK 标准的 rmi 协议实现，传输参数和返回参数对象需要实现 Serializable 接口，使用 java 标准序列化机制，使用阻塞式短连接，传输数据包大小混合，消费者和提供者个数差不多，可传文件，传输协议 TCP。多个短连接，TCP 协议传输，同步传输，适用常规的远程服务调用和 rmi 互 操作。在依赖低版本的 Common-Collections 包，java 序列化存在安全漏洞</li><li><strong>3.webservice</strong> 基于 WebService 的远程调用协议，集成 CXF 实现，提供和原生 WebService 的互操作。多个短连接，基于 HTTP 传输，同步传输，适用系统集成和跨语言调用；</li><li><strong>4.http</strong> 基于 Http 表单提交的远程调用协议，使用 Spring 的 HttpInvoke 实 现。多个短连接，传输协议 HTTP，传入参数大小混合，提供者个数多于消 费者，需要给应用程序和浏览器 JS 调用</li><li><strong>5.hessian</strong> 集成 Hessian 服务，基于 HTTP 通讯，采用 Servlet 暴露服务，Dubbo 内嵌 Jetty 作为服务器时默认实现，提供与 Hession 服务互操作。多个短连接，同步 HTTP 传输，Hessian 序列化，传入参数较大，提供者大于消费者，提供者压力较大，可传文件；</li><li><strong>6.memcache</strong> 基于 memcached 实现的 RPC 协议</li><li><strong>7.redis</strong> 基于 redis 实现的 RPC 协议</li></ul><h2 id="_5-dubbo-中都用到哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_5-dubbo-中都用到哪些设计模式"><span>5.Dubbo 中都用到哪些设计模式？</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-c33e9fa1-e1da-4701-ac97-3fb9d32d87d1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="责任链模式" tabindex="-1"><a class="header-anchor" href="#责任链模式"><span><strong>责任链模式</strong>:</span></a></h3><p>责任链模式在 Dubbo 中发挥的作用举足轻重，就像是 Dubbo 框架的骨架。Dubbo 的调用链组织是用责任链模式串连起来的。责任链中的每个节点实现 Filter 接口，然后由 ProtocolFilterWrapper，将所有 Filter 串连起来。Dubbo 的许多功能都是通过 Filter 扩展实现的，比如监控、日志、缓存、安全、telnet 以及 RPC 本身都是。</p><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span><strong>观察者模式</strong>:</span></a></h3><p>Dubbo 中使用观察者模式最典型的例子是 RegistryService。消费者在初始化的时候回调用 subscribe 方法，注册一个观察者，如果观察者引用的服务地址列表发生改变，就会通过 NotifyListener 通知消费者。此外，Dubbo 的 InvokerListener、ExporterListener 也实现了观察者模式，只要实现该接口，并注册，就可以接收到 consumer 端调用 refer 和 provider 端调用 export 的通知。</p><h3 id="修饰器模式" tabindex="-1"><a class="header-anchor" href="#修饰器模式"><span><strong>修饰器模式</strong>:</span></a></h3><p>Dubbo 中还大量用到了修饰器模式。比如 ProtocolFilterWrapper 类是对 Protocol 类的修饰。在 export 和 refer 方法中，配合责任链模式，把 Filter 组装成责任链，实现对 Protocol 功能的修饰。其他还有 ProtocolListenerWrapper、 ListenerInvokerWrapper、InvokerWrapper 等。</p><h3 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式"><span><strong>工厂方法模式</strong>:</span></a></h3><p>CacheFactory 的实现采用的是工厂方法模式。CacheFactory 接口定义 getCache 方法，然后定义一个 AbstractCacheFactory 抽象类实现 CacheFactory，并将实际创建 cache 的 createCache 方法分离出来，并设置为抽象方法。这样具体 cache 的创建工作就留给具体的子类去完成。</p><h3 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式"><span><strong>抽象工厂模式</strong>:</span></a></h3><p>ProxyFactory 及其子类是 Dubbo 中使用抽象工厂模式的典型例子。ProxyFactory 提供两个方法，分别用来生产 Proxy 和 Invoker（这两个方法签名看起来有些矛盾，因为 getProxy 方法需要传入一个 Invoker 对象，而 getInvoker 方法需要传入一个 Proxy 对象，看起来会形成循环依赖，但其实两个方式使用的场景不一样）。AbstractProxyFactory 实现了 ProxyFactory 接口，作为具体实现类的抽象父类。然后定义了 JdkProxyFactory 和 JavassistProxyFactory 两个具体类，分别用来生产基于 jdk 代理机制和基于 javassist 代理机制的 Proxy 和 Invoker。</p><h3 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span><strong>适配器模式</strong>:</span></a></h3><p>为了让用户根据自己的需求选择日志组件，Dubbo 自定义了自己的 Logger 接口，并为常见的日志组件（包括 jcl, jdk, log4j, slf4j）提供相应的适配器。并且利用简单工厂模式提供一个 LoggerFactory，客户可以创建抽象的 Dubbo 自定义 Logger，而无需关心实际使用的日志组件类型。在 LoggerFactory 初始化时，客户通过设置系统变量的方式选择自己所用的日志组件，这样提供了很大的灵活性。</p><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span><strong>代理模式</strong>:</span></a></h3><p>Dubbo consumer 使用 Proxy 类创建远程服务的本地代理，本地代理实现和远程服务一样的接口，并且屏蔽了网络通信的细节，使得用户在使用本地代理的时候，感觉和使用本地服务一样。</p><h2 id="_6-如果-dubbo-中-provider-提供的服务由多个版本怎么办" tabindex="-1"><a class="header-anchor" href="#_6-如果-dubbo-中-provider-提供的服务由多个版本怎么办"><span>6.如果 Dubbo 中 provider 提供的服务由多个版本怎么办？</span></a></h2><p>可以直接通过 Dubbo 配置中的 version 版本来控制多个版本即可。</p><p>比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dubbo:service interface=&quot;com.xxxx.rent.service.IDemoService&quot; ref=&quot;iDemoServiceFirst&quot; version=&quot;1.0.0&quot;/&gt;</span></span>
<span class="line"><span>&lt;dubbo:service interface=&quot;com.xxxx.rent.service.IDemoService&quot; ref=&quot;iDemoServiceSecond&quot; version=&quot;1.0.1&quot;/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>老版本 version=1.0.0, 新版本 version=1.0.1</p><h2 id="_7-服务暴露的流程是怎么样的" tabindex="-1"><a class="header-anchor" href="#_7-服务暴露的流程是怎么样的"><span>7.服务暴露的流程是怎么样的？</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-8203dc1c-927f-45d0-83fd-6a94e3283121.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1.通过 ServiceConfig 解析标签，创建 dubbo 标签解析器来<strong>解析 dubbo 的标签</strong>，容器创建完成之后，<strong>触发 ContextRefreshEvent 事件回调开始暴露服务</strong></p><p>2.通过 proxyFactory.getInvoker 方法，并利用<strong>javassist 或 DdkProxyFactory 来进行动态代理</strong>，将服务暴露接口<strong>封装成 invoke</strong>r 对象，里面包含了需要执行的方法的对象信息和具体的 URL 地址。</p><p>3.再通过 DubboProtocol 的实现把包装后的<strong>invoker 转换成 exporter</strong>，</p><p>4.然后<strong>启动服务器 server</strong>，监听端口</p><p>5.最后 RegistryProtocol 保存 URL 地址和 invoker 的映射关系，同时<strong>注册到服务中心</strong></p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-4fa2fafb-1087-4fd7-b963-4a094eb1f3a9.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8-服务引用的流程是怎么样的" tabindex="-1"><a class="header-anchor" href="#_8-服务引用的流程是怎么样的"><span>8.服务引用的流程是怎么样的？</span></a></h2><p>1.首先客户端根据 config 文件信息从注册中心<strong>订阅服务</strong>，首次会全量<strong>缓存到本地</strong>，后续的更新会监听动态更新到本地。</p><p>2.之后 DubboProtocol<strong>根据 provider</strong>的地址和接口信息<strong>连接到服务端</strong>server，<strong>开启客户端 clien</strong>t，然后创建 invoker</p><p>3.之后通过 invoker 为服务接口<strong>生成代理对象</strong>，这个代理对象用于远程调用 provider，至此完成了服务引用</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-f42fb83d-478d-4305-9191-1e6e871409ea.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_9-dubbo-的注册中心有哪些" tabindex="-1"><a class="header-anchor" href="#_9-dubbo-的注册中心有哪些"><span>9.Dubbo 的注册中心有哪些？</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-0d76630a-d90b-4ecc-8727-8769ad80fa4e.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Zookeeper、Redis、Multicast、Simple 等都可以作为 Dubbo 的注册中心</p><h2 id="_10-聊聊-dubbo-spi-机制" tabindex="-1"><a class="header-anchor" href="#_10-聊聊-dubbo-spi-机制"><span>10.聊聊 Dubbo SPI 机制？</span></a></h2><p>SPI(Service Provider Interface)，是一种<strong>服务发现机制</strong>，其实就是将结构的实现类写入配置当中，在服务加载的时候将配置文件独处，加载实现类，这样就可以在运行的时候，<strong>动态的帮助接口替换实现类</strong>。</p><p>Dubbo 的 SPI 其实是对 java 的 SPI 进行了一种增强,可以按需加载实现类之外，增加了 IOC 和 AOP 的特性，还有<strong>自适应扩展</strong>机制。</p><p>SPI 在 dubbo 应用很多，包括协议扩展、集群扩展、路由扩展、序列化扩展等等。</p><p>Dubbo 对于文件目录的配置分为了<strong>三类</strong>。</p><ul><li><p>1.META-INF/services/ 目录：该目录下的 SPI 配置文件是为了用来兼容 Java SPI 。</p></li><li><p>2.META-INF/dubbo/ 目录：该目录存放用户自定义的 SPI 配置文件。</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>key=com.xxx.xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>3.META-INF/dubbo/internal/ 目录：该目录存放 Dubbo 内部使用的 SPI 配置文件。</li></ul><h2 id="_11-dubbo-的-spi-和-java-的-spi-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-dubbo-的-spi-和-java-的-spi-有什么区别"><span>11.Dubbo 的 SPi 和 Java 的 SPI 有什么区别？</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-9944f8d5-5a58-4896-8604-06b873fc7e3c.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Java Spi</strong></p><ul><li>Java SPI 在查找扩展实现类的时候遍历 SPI 的配置文件并且将实现类<strong>全部实例化</strong></li></ul><p><strong>Dubbo Spi</strong></p><ul><li>1，对 Dubbo 进行扩展，不需要改动 Dubbo 的源码</li><li>2，延迟加载，可以一次<strong>只加载自己想要加载的</strong>扩展实现。</li><li>3，增加了对扩展点 IOC 和 AOP 的支持，一个扩展点可以直接 setter 注入其它扩展点。</li><li>4，Dubbo 的扩展机制能很好的支持第三方 IoC 容器，默认支持 Spring Bean。</li></ul><h2 id="_12-有哪些负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_12-有哪些负载均衡策略"><span>12.有哪些负载均衡策略？</span></a></h2><p><strong>1.加权随机</strong>：比如我们有三台服务器[A, B, C]，给他们设置权重为[4, 5, 6]，然后讲这三个数平铺在水平线上,和为 15。</p><p>然后在 15 以内生成一个随机数，0 ～ 4 是服务器 A，4 ～ 9 是服务器 B，9 ～ 15 是服务器 C</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-bd11d3ec-5d87-417e-bca0-70241e1fc065.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>2.最小活跃数</strong>：每个服务提供者对应一个活跃数 active，初始情况下，所有服务提供者活跃数均为 0。每收到一个请求，活跃数加 1，完成请求后则将活跃数减 1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-9eb04922-b0c8-4f49-8839-902fc97cc2ed.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>3.一致性 hash</strong>：</p><ul><li>首先求出 memcached 服务器（节点）的哈希值，并将其配置到 0 ～ 2 的 32 次方的圆（continuum）上。</li><li>然后采用同样的方法求出存储数据的键的哈希值，并映射到相同的圆上。</li><li>然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上。如果超过 2 的 32 次方仍然找不到服务器，就会保存到第一台 memcached 服务器上。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-be1ef6ba-f24d-4fd6-adc6-8b7cc086f66b.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>4.加权轮询</strong>：比如我们有三台服务器[A, B, C]，给他们设置权重为[4, 5, 6]，那么假如总共有 15 次请求，那么会有 4 次落在 A 服务器，5 次落在 B 服务器，6 次落在 C 服务器。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-e9d2dd09-4d2a-4c43-8920-eac89c6341bc.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_13-集群容错方式有哪些" tabindex="-1"><a class="header-anchor" href="#_13-集群容错方式有哪些"><span>13.集群容错方式有哪些？</span></a></h2><p>1.<strong>Failover Cluster 失败自动切换</strong>：dubbo 的默认容错方案，当调用失败时自动切换到其他可用的节点，具体的重试次数和间隔时间可用通过引用服务的时候配置，默认重试次数为 1 是只调用一次。</p><p>2.<strong>Failback Cluster 失败自动恢复</strong>：在调用失败，记录日志和调用信息，然后返回空结果给 consumer，并且通过定时任务每隔 5 秒对失败的调用进行重试</p><p>3.<strong>Failfast Cluster 快速失败</strong>：只会调用一次，失败后立刻抛出异常</p><p>4.<strong>Failsafe Cluster 失败安全</strong>：调用出现异常，记录日志不抛出，返回空结果</p><p>5.<strong>Forking Cluster 并行调用多个服务提供者</strong>：通过线程池创建多个线程，并发调用多个 provider，结果保存到阻塞队列，只要有一个 provider 成功返回了结果，就会立刻返回结果</p><p>6.<strong>Broadcast Cluster 广播模式</strong>：逐个调用每个 provider，如果其中一台报错，在循环调用结束后，抛出异常。</p><h2 id="_14-说说-dubbo-的分层" tabindex="-1"><a class="header-anchor" href="#_14-说说-dubbo-的分层"><span>14.说说 Dubbo 的分层？</span></a></h2><p>分层图：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-0c120220-d8be-4180-8694-3787446e1daa.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从大的范围来说，dubbo 分为三层</p><ul><li><strong>business</strong>业务逻辑层由我们自己来提供接口和实现还有一些配置信息</li><li><strong>RPC</strong>层就是真正的 RPC 调用的核心层，封装整个 RPC 的调用过程、负载均衡、集群容错、代理</li><li><strong>remoting</strong>则是对网络传输协议和数据转换的封装。</li></ul><p>Service 和 Config 两层可以认为是<strong>API</strong>层，主要提供给<strong>API 使用者</strong>，使用者只需要配置和完成业务代码就可以了。</p><p>后面所有的层级是<strong>SPI</strong>层，主 要提供给扩展者使用主要是用来做<strong>Dubbo 的二次开发</strong>扩展功能。</p><p>再划分到更细的层面，就是图中的 10 层模式。</p><h2 id="_15-服务提供者能实现失效踢出是什么原理" tabindex="-1"><a class="header-anchor" href="#_15-服务提供者能实现失效踢出是什么原理"><span>15.服务提供者能实现失效踢出是什么原理？</span></a></h2><p>服务失效踢出基于<strong>Zookeeper 的临时节点</strong>原理。</p><p>Zookeeper 中节点是有生命周期的，具体的生命周期取决于节点的类型，节点主要分为<strong>持久节点</strong>(Persistent)和<strong>临时节点</strong>(Ephemeral) 。</p><h2 id="_16-为什么要通过代理对象通信" tabindex="-1"><a class="header-anchor" href="#_16-为什么要通过代理对象通信"><span>16.为什么要通过代理对象通信？？</span></a></h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-40dc629c-e166-476f-9e03-883238e8ba25.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实主要就是为了将调用细节封装起来，将调用远程方法变得和调用本地方法一样简单，还可以做一些其他方面的增强，比如负载均衡，容错机制，过滤操作，调用数据的统计。</p><h2 id="_17-怎么设计一个-rpc-框架" tabindex="-1"><a class="header-anchor" href="#_17-怎么设计一个-rpc-框架"><span>17.怎么设计一个 RPC 框架？</span></a></h2><p>关于这个问题，其实核心考察点就是你<strong>对于 RPC 框架的理解</strong>，一个成熟的 RPC 框架<strong>可以完成哪些功能</strong>，其实当我们看过一两个 RPC 框架后，就可以对这个问题回答个七七八八了，我们来举个例子。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-23df00fb-11aa-41a4-8bbe-e53bb1b65358.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1.首先我们得需要一个<strong>注册中心</strong>，去管理消费者和提供者的节点信息，这样才会有消费者和提供才可以去订阅服务，注册服务。</p><p>2.当有了注册中心后，可能会有很多个 provider 节点，那么我们肯定会有一个<strong>负载均衡</strong>模块来负责节点的调用，至于用户指定路由规则可以使一个额外的优化点。</p><p>3.具体的调用肯定会需要牵扯到通信协议，所以需要一个模块来对<strong>通信协议进行封装</strong>，网络传输还要考虑序列化。</p><p>4.当调用失败后怎么去处理？所以我们还需要一个<strong>容错模块</strong>，来负责失败情况的处理。</p><p>5.其实做完这些一个基础的模型就已经搭建好了，我们还可以有更多的优化点，比如一些请求<strong>数据的监控，配置信息的处理，日志信息的处理</strong>等等。</p><p>这其实就是一个比较基本的 RPC 框架的大体思路，大家有没有 get 到？</p><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;mid=2247491592&amp;idx=1&amp;sn=454ae3d6a661a1eb63ffbad767ccb479&amp;chksm=c0cf08adf7b881bbfd7d2a2ad150e7621756ccc06a6ffacd52833e7f4b84d5d01e16e5a6770f&amp;scene=27#wechat_redirect" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;mid=2247491592&amp;idx=1&amp;sn=454ae3d6a661a1eb63ffbad767ccb479&amp;chksm=c0cf08adf7b881bbfd7d2a2ad150e7621756ccc06a6ffacd52833e7f4b84d5d01e16e5a6770f&amp;scene=27#wechat_redirect</a>，作者：moon聊技术，整理：沉默王二</p></blockquote><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括Java基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,121)]))}const c=t(o,[["render",n],["__file","dubbo-17.html.vue"]]),g=JSON.parse('{"path":"/interview/dubbo-17.html","title":"17 道 Dubbo 精选面试题👍","lang":"zh-CN","frontmatter":{"title":"17 道 Dubbo 精选面试题👍","shortTitle":"17 道 Dubbo 精选面试题👍","category":["求职面试"],"tag":["面试题&八股文"],"description":"二哥的Java进阶之路，小白的零基础Java教程，17 道 Dubbo 精选面试题👍","head":[["meta",{"name":"keywords","content":"dubbo,面试题,八股文"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/interview/dubbo-17.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"17 道 Dubbo 精选面试题👍"}],["meta",{"property":"og:description","content":"二哥的Java进阶之路，小白的零基础Java教程，17 道 Dubbo 精选面试题👍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-30098e26-c2c6-463b-bdb8-4cec95a9b6f8.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"面试题&八股文"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17 道 Dubbo 精选面试题👍\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-30098e26-c2c6-463b-bdb8-4cec95a9b6f8.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-78d6db3f-70c7-4ebb-90cb-5b731e77019e.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-4814068d-19cc-42d9-b9bc-26c4c063c8c2.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-1f4771de-fad0-410c-a764-c173146dd6d7.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-c33e9fa1-e1da-4701-ac97-3fb9d32d87d1.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-8203dc1c-927f-45d0-83fd-6a94e3283121.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-4fa2fafb-1087-4fd7-b963-4a094eb1f3a9.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-f42fb83d-478d-4305-9191-1e6e871409ea.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-0d76630a-d90b-4ecc-8727-8769ad80fa4e.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-9944f8d5-5a58-4896-8604-06b873fc7e3c.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-bd11d3ec-5d87-417e-bca0-70241e1fc065.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-9eb04922-b0c8-4f49-8839-902fc97cc2ed.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-be1ef6ba-f24d-4fd6-adc6-8b7cc086f66b.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-e9d2dd09-4d2a-4c43-8920-eac89c6341bc.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-0c120220-d8be-4180-8694-3787446e1daa.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-40dc629c-e166-476f-9e03-883238e8ba25.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-msbgwzdubboq-23df00fb-11aa-41a4-8bbe-e53bb1b65358.jpg\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"1.Dubbo 是什么？RPC 又是什么？","slug":"_1-dubbo-是什么-rpc-又是什么","link":"#_1-dubbo-是什么-rpc-又是什么","children":[]},{"level":2,"title":"2. Dubbo 能做什么？","slug":"_2-dubbo-能做什么","link":"#_2-dubbo-能做什么","children":[]},{"level":2,"title":"3.能说下 Dubbo 的总体的调用过程吗？","slug":"_3-能说下-dubbo-的总体的调用过程吗","link":"#_3-能说下-dubbo-的总体的调用过程吗","children":[]},{"level":2,"title":"4.说说 Dubbo 支持哪些协议，每种协议的应用场景和优缺点","slug":"_4-说说-dubbo-支持哪些协议-每种协议的应用场景和优缺点","link":"#_4-说说-dubbo-支持哪些协议-每种协议的应用场景和优缺点","children":[]},{"level":2,"title":"5.Dubbo 中都用到哪些设计模式？","slug":"_5-dubbo-中都用到哪些设计模式","link":"#_5-dubbo-中都用到哪些设计模式","children":[{"level":3,"title":"责任链模式:","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":3,"title":"观察者模式:","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"修饰器模式:","slug":"修饰器模式","link":"#修饰器模式","children":[]},{"level":3,"title":"工厂方法模式:","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"抽象工厂模式:","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"适配器模式:","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":3,"title":"代理模式:","slug":"代理模式","link":"#代理模式","children":[]}]},{"level":2,"title":"6.如果 Dubbo 中 provider 提供的服务由多个版本怎么办？","slug":"_6-如果-dubbo-中-provider-提供的服务由多个版本怎么办","link":"#_6-如果-dubbo-中-provider-提供的服务由多个版本怎么办","children":[]},{"level":2,"title":"7.服务暴露的流程是怎么样的？","slug":"_7-服务暴露的流程是怎么样的","link":"#_7-服务暴露的流程是怎么样的","children":[]},{"level":2,"title":"8.服务引用的流程是怎么样的？","slug":"_8-服务引用的流程是怎么样的","link":"#_8-服务引用的流程是怎么样的","children":[]},{"level":2,"title":"9.Dubbo 的注册中心有哪些？","slug":"_9-dubbo-的注册中心有哪些","link":"#_9-dubbo-的注册中心有哪些","children":[]},{"level":2,"title":"10.聊聊 Dubbo SPI 机制？","slug":"_10-聊聊-dubbo-spi-机制","link":"#_10-聊聊-dubbo-spi-机制","children":[]},{"level":2,"title":"11.Dubbo 的 SPi 和 Java 的 SPI 有什么区别？","slug":"_11-dubbo-的-spi-和-java-的-spi-有什么区别","link":"#_11-dubbo-的-spi-和-java-的-spi-有什么区别","children":[]},{"level":2,"title":"12.有哪些负载均衡策略？","slug":"_12-有哪些负载均衡策略","link":"#_12-有哪些负载均衡策略","children":[]},{"level":2,"title":"13.集群容错方式有哪些？","slug":"_13-集群容错方式有哪些","link":"#_13-集群容错方式有哪些","children":[]},{"level":2,"title":"14.说说 Dubbo 的分层？","slug":"_14-说说-dubbo-的分层","link":"#_14-说说-dubbo-的分层","children":[]},{"level":2,"title":"15.服务提供者能实现失效踢出是什么原理？","slug":"_15-服务提供者能实现失效踢出是什么原理","link":"#_15-服务提供者能实现失效踢出是什么原理","children":[]},{"level":2,"title":"16.为什么要通过代理对象通信？？","slug":"_16-为什么要通过代理对象通信","link":"#_16-为什么要通过代理对象通信","children":[]},{"level":2,"title":"17.怎么设计一个 RPC 框架？","slug":"_17-怎么设计一个-rpc-框架","link":"#_17-怎么设计一个-rpc-框架","children":[]}],"git":{"createdTime":1666929463000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":16.51,"words":4954},"filePathRelative":"interview/dubbo-17.md","localizedDate":"2022年10月28日","excerpt":"\\n<p><strong>目录</strong></p>\\n<ul>\\n<li>1.Dubbo 是什么？RPC 又是什么？</li>\\n<li>2. Dubbo 能做什么？</li>\\n<li>3.能说下 Dubbo 的总体的调用过程吗？</li>\\n<li>4.说说 Dubbo 支持哪些协议，每种协议的应用场景和优缺点</li>\\n<li>5.Dubbo 中都用到哪些设计模式？</li>\\n<li>6.如果 Dubbo 中 provider 提供的服务由多个版本怎么办？</li>\\n<li>7.服务暴露的流程是怎么样的？</li>\\n<li>8.服务引用的流程是怎么样的？</li>\\n<li>9.Dubbo 的注册中心有哪些？</li>\\n<li>10.聊聊 Dubbo SPI 机制？</li>\\n<li>11.Dubbo 的 SPi 和 JAVA 的 SPI 有什么区别？</li>\\n<li>12.有哪些负载均衡策略？</li>\\n<li>13.集群容错方式有哪些？</li>\\n<li>14.说说 Dubbo 的分层？</li>\\n<li>15.服务提供者能实现失效踢出是什么原理？</li>\\n<li>16.为什么要通过代理对象通信？？</li>\\n<li>17.怎么设计一个 RPC 框架？</li>\\n</ul>"}');export{c as comp,g as data};
