import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e,o as n}from"./app-BeHkqkE2.js";const t={};function l(r,i){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="第十九节-jvm-核心知识点总结" tabindex="-1"><a class="header-anchor" href="#第十九节-jvm-核心知识点总结"><span>第十九节：JVM 核心知识点总结</span></a></h1><h2 id="一、基本概念" tabindex="-1"><a class="header-anchor" href="#一、基本概念"><span>一、基本概念</span></a></h2><h3 id="_1-1-openjdk" tabindex="-1"><a class="header-anchor" href="#_1-1-openjdk"><span>1.1 OpenJDK</span></a></h3><p>自 1996 年 <code>JDK 1.0</code> 发布以来，Sun 公司在大版本上发行了 <code>JDK 1.1</code>、<code>JDK 1.2</code>、<code>JDK 1.3</code>、<code>JDK 1.4</code>、<code>JDK 5</code>，<code>JDK 6</code> ，这些版本的 JDK 都可以统称为 SunJDK 。</p><p>之后在 2006 年的 JavaOne 大会上，Sun 公司宣布将 Java 开源，在随后的一年多里，它陆续将 JDK 的各个部分在 GPL v2（GNU General Public License，version 2）协议下开源，并建立了 OpenJDK 组织来对这些代码进行独立的管理，这就是 OpenJDK 的来源，此时的 OpenJDK 拥有当时 sunJDK 7 的几乎全部代码。</p><h3 id="_1-2-oraclejdk" tabindex="-1"><a class="header-anchor" href="#_1-2-oraclejdk"><span>1.2 OracleJDK</span></a></h3><p>在 JDK 7 的开发期间，由于各种原因的影响，Sun 公司市值一路下跌，已无力推进 JDK 7 的开发，于是 JDK 7 的发布一直被推迟。</p><p>之后在 2009 年 Sun 公司被 Oracle 公司收购，为解决 JDK 7 长期跳票的问题，Oracle 将 JDK 7 中大部分未能完成的项目推迟到 JDK 8 ，并于 2011 年发布了JDK 7，在这之后由 Oracle 公司正常发行的 JDK 版本就由 SunJDK 改称为 Oracle JDK。</p><p>在 2017 年 JDK 9 发布后，Oracle 公司宣布：以后 JDK 将会在每年的 3 月和 9 月各发布一个大版本，即半年发行一个大版本，目的是为了避免众多功能被捆绑到一个 JDK 版本上而引发的无法交付的风险。</p><p>在 JDK 11 发布后，Oracle 同步调整了 JDK 的商业授权，宣布从 JDK 11 起，将以前的商业特性全部开源给 OpenJDK ，这样 OpenJDK 11 和 OracleJDK 11 的代码和功能，在本质上就完全相同了。</p><p>同时还宣布以后会发行两个版本的 JDK ：</p><ul><li>一个是在 GPLv2 + CE 协议下由 Oracle 开源的 OpenJDK；</li><li>一个是在 OTN 协议下正常发行的 OracleJDK。</li></ul><p>两者共享大部分源码，在功能上几乎一致。唯一的区别是 Oracle OpenJDK 可以在开发、测试或者生产环境中使用，但只有半年的更新支持；而 OracleJDK 对个人免费，但在生产环境中商用收费，可以有三年时间的更新支持。</p><p>目前最新的长期支持的 JDK 是 JDK 21（LTS），详情可以参考<a href="https://www.cnblogs.com/thisiswhy/p/17714341.html" target="_blank" rel="noopener noreferrer">朋友 why 技术的帖子</a>。</p><h3 id="_1-3-hotspot-vm" tabindex="-1"><a class="header-anchor" href="#_1-3-hotspot-vm"><span>1.3 HotSpot VM</span></a></h3><p>它是 Sun/Oracle JDK 和 OpenJDK 中默认的虚拟机，也是目前使用最为广泛的虚拟机。</p><p>最初由 Longview Technologies 公司设计发明，该公司在 1997 年被 Sun 公司收购，随后 Sun 公司在 2006 年开源 SunJDK 时也将 HotSpot 虚拟机一并进行了开源。</p><p>Oracle 收购 Sun 以后，建立了 HotRockit 项目，并将其收购的另外一家公司（BEA）的 JRockit 虚拟机中的优秀特性集成到 <a href="https://javabetter.cn/jvm/what-is-jvm.html" target="_blank" rel="noopener noreferrer">HotSpot 中</a>。</p><p>HotSpot 在这个过程里移除掉永久代，并吸收了 JRockit 的 Java Mission Control 监控工具等功能。</p><p>到 JDK 8 发行时，采用的就是集两者之长的 HotSpot VM。</p><p>我们可以在自己的电脑上使用 <code>java -version</code> 来获得 JDK 的信息：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/zongjie-20240110193338.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、java-内存区域" tabindex="-1"><a class="header-anchor" href="#二、java-内存区域"><span>二、Java 内存区域</span></a></h2><p><a href="https://javabetter.cn/jvm/neicun-jiegou.html" target="_blank" rel="noopener noreferrer">Java 内存区域</a>我们之前讲过，这里再盘一盘。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20231227111238.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_2-1-程序计数器"><span>2.1 程序计数器</span></a></h3><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。</p><p>字节码解释器通过改变程序计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要该计数器来完成。</p><p>每个线程都拥有一个独立的程序计数器，各个线程之间的计数器互不影响，独立存储。</p><h3 id="_2-2-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-2-虚拟机栈"><span>2.2 虚拟机栈</span></a></h3><p>虚拟机栈（Java Virtual Machine Stack）也是线程私有，它描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个<a href="https://javabetter.cn/jvm/stack-frame.html" target="_blank" rel="noopener noreferrer">栈帧</a>，用于存储局部变量表、操作数栈、动态连接、方法出口等信息。</p><p>方法从调用到结束就对应着一个栈帧从入栈到出栈的过程。在《Java 虚拟机规范》中，对该内存区域规定了两类异常：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的栈深度，将抛出 <code>StackOverflowError</code> 异常；</li><li>如果 Java 虚拟机栈的容量允许动态扩展，当栈扩展时如果无法申请到足够的内存会抛出 <code>OutOfMemoryError</code> 异常。</li></ul><h3 id="_2-3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_2-3-本地方法栈"><span>2.3 本地方法栈</span></a></h3><p>本地方法栈（Native Method Stacks）与虚拟机栈类似，其区别在于：Java 虚拟机栈是为虚拟机执行 Java 方法（也就是字节码）服务的，而本地方法栈则是为 JVM 使用到的<a href="https://javabetter.cn/oo/native-method.html" target="_blank" rel="noopener noreferrer">本地（Native）方法</a>服务。</p><h3 id="_2-4-堆" tabindex="-1"><a class="header-anchor" href="#_2-4-堆"><span>2.4 堆</span></a></h3><p>堆（Java Heap）是虚拟机所管理的最大一块内存空间，它被所有线程所共享，用于存放对象实例。</p><p>Java 堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为是连续的。Java 堆可以被实现成固定大小的，也可以是可扩展的。</p><p>当前大多数主流的虚拟机都是按照可扩展来实现的，即可以通过最大值参数 <code>-Xmx</code> 和最小值参数 <code>-Xms</code> 进行设定。</p><p>如果 Java 堆中没有足够的内存来完成对象实例分配，并且堆也无法再扩展时，Java 虚拟机将会抛出 <code>OutOfMemoryError</code> 异常。</p><h3 id="_2-5-方法区" tabindex="-1"><a class="header-anchor" href="#_2-5-方法区"><span>2.5 方法区</span></a></h3><p>方法区（Method Area）也是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、JIT 编译后的代码缓存等数据。</p><p>方法区也被称为 “非堆”，目的是与 Java 堆进行区分。《Java 虚拟机规范》规定，如果方法区无法满足新的内存分配需求时，将会抛出 <code>OutOfMemoryError</code> 异常。</p><p><strong>JDK 8 以后的方法区实现已经不再是永久代（Permanent Generation）了，而是使用元空间（Metaspace）来实现</strong>。</p><p>运行时常量池（Runtime Constant Pool）也是方法区的一部分，用于存放常量池表（Constant Pool Table），常量池表中存放了编译期生成的各种<a href="https://javabetter.cn/jvm/class-file-jiegou.html#_03%E3%80%81%E5%B8%B8%E9%87%8F%E6%B1%A0" target="_blank" rel="noopener noreferrer">符号字面量和符号引用</a>。</p><blockquote><p>JDK 8 以后的运行时常量池在元空间中。</p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20240110195211.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、对象" tabindex="-1"><a class="header-anchor" href="#三、对象"><span>三、对象</span></a></h2><h3 id="_3-1-对象的创建" tabindex="-1"><a class="header-anchor" href="#_3-1-对象的创建"><span>3.1 对象的创建</span></a></h3><p>当我们在代码中使用 <code>new</code> 关键字创建一个<a href="https://javabetter.cn/oo/object-class.html" target="_blank" rel="noopener noreferrer">对象</a>时，其在 JVM 中需要经过以下步骤：</p><h4 id="_1-类加载过程" tabindex="-1"><a class="header-anchor" href="#_1-类加载过程"><span>1. 类加载过程</span></a></h4><p>当虚拟机遇到一条<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a> <code>new</code> 时，首先将去检查这个指令的参数是否能在常量池中定位到一个符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，就必须先执行相应的<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类加载过程</a>。</p><h4 id="_2-分配内存" tabindex="-1"><a class="header-anchor" href="#_2-分配内存"><span>2. 分配内存</span></a></h4><p>在类加载检查通过后，虚拟机需要给新生对象分配内存空间。根据 Java 堆是否规整，可以有以下两种分配方案：</p><p>①、<strong>指针碰撞</strong>：假设 Java 堆中内存是绝对规整的，所有使用的内存放在一边，所有未被使用的内存放在另外一边，中间以指针作为分界点指示器。</p><p>此时内存分配只是将指针向空闲方向偏移出对象大小的空间即可，这种方式被称为指针碰撞。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-afb11e2b-f457-4a19-bb21-f659756061ec.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>②、<strong>空闲列表</strong>：如果 Java 堆不是规整的，此时虚拟机需要维护一个列表，记录哪些内存块是可用的，哪些是不可用的。在进行内存分配时，只需要从该列表中选取出一块足够的内存空间划分给对象实例即可。</p><blockquote><p>注：Java 堆是否规整取决于其采用的<a href="https://javabetter.cn/jvm/gc-collector.html" target="_blank" rel="noopener noreferrer">垃圾收集器</a>是否带有空间压缩整理能力，前面讲过了。</p></blockquote><p>除了分配方式外，由于对象创建在虚拟机中是一个非常频繁的行为，此时需要保证在<a href="https://javabetter.cn/thread/wangzhe-thread.html" target="_blank" rel="noopener noreferrer">并发环境</a>下的线程安全：如果一个线程给对象 A 分配了内存空间，但指针还没来得及修改，此时就可能出现另外一个线程使用原来的指针来给对象 B 分配内存空间的情况。</p><p>想要解决这个问题有两个方案：</p><p>①、<strong>方式一</strong>：采用<a href="https://javabetter.cn/thread/synchronized-1.html" target="_blank" rel="noopener noreferrer">同步</a>锁定，或采用 <a href="https://javabetter.cn/thread/cas.html" target="_blank" rel="noopener noreferrer">CAS</a> 配上失败重试的方式来保证更新操作的原子性。</p><p>②、<strong>方式二</strong>：为每个线程在 Java 堆中预先分配一块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。</p><p>线程在进行内存分配时优先使用本地缓冲，当本地缓冲使用完成后，再向 Java 堆申请分配，此时 Java 堆采用同步锁定的方式来保证分配行为的线程安全。</p><h4 id="_3-对象头设置" tabindex="-1"><a class="header-anchor" href="#_3-对象头设置"><span>3. 对象头设置</span></a></h4><p>将对象有关的元数据信息、对象的哈希码、分代年龄等信息存储到对象头中。</p><p>可以和 <a href="https://javabetter.cn/jvm/jit.html" target="_blank" rel="noopener noreferrer">JIT</a> 那节的内容关联起来。</p><h4 id="_4-对象初始化" tabindex="-1"><a class="header-anchor" href="#_4-对象初始化"><span>4. 对象初始化</span></a></h4><p>调用对象的<a href="https://javabetter.cn/oo/construct.html" target="_blank" rel="noopener noreferrer">构造方法</a>，即 Class 文件中的 <code>&lt;init&gt;()</code> 来初始化对象，为相关字段赋值。</p><h3 id="_3-2-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_3-2-对象的内存布局"><span>3.2 对象的内存布局</span></a></h3><p>在 HotSpot 中，对象在堆内存中的存储布局可以划分为以下三个部分：</p><h4 id="_1-对象头-header" tabindex="-1"><a class="header-anchor" href="#_1-对象头-header"><span>1. 对象头 (Header)</span></a></h4><p>对象头包括两部分信息：</p><ul><li><strong>Mark Word</strong>：对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，官方统称为 <a href="https://javabetter.cn/thread/synchronized.html" target="_blank" rel="noopener noreferrer">Mark Word</a>，我们曾在 <a href="https://javabetter.cn/thread/synchronized.html" target="_blank" rel="noopener noreferrer">synchronized 的四种锁状态</a>讲过。</li><li><strong>类型指针</strong>：对象指向它类型元数据的指针，Java 虚拟机通过这个指针来确定该对象是哪个类的实例。需要说明的是，并非所有的虚拟机都必须要在对象数据上保留类型指针，这取决于对象的访问定位方式。</li></ul><h4 id="_2-实例数据-instance-data" tabindex="-1"><a class="header-anchor" href="#_2-实例数据-instance-data"><span>2. 实例数据 (Instance Data)</span></a></h4><p>即我们在代码中定义的各种类型的<a href="https://javabetter.cn/oo/var.html" target="_blank" rel="noopener noreferrer">字段</a>，无论是从父类继承而来，还是子类中定义的都需要记录。</p><h4 id="_3-对齐填充-padding" tabindex="-1"><a class="header-anchor" href="#_3-对齐填充-padding"><span>3. 对齐填充 (Padding)</span></a></h4><p>主要起占位符的作用。HotSpot 要求对象起始地址必须是 8 字节的整倍数，即间接要求了任何对象的大小都必须是 8 字节的整倍数。对象头部分在设计上就是 8 字节的整倍数，如果对象的实例数据不是 8 字节的整倍数，则由对齐填充进行补全。</p><h3 id="_3-3-对象的访问定位" tabindex="-1"><a class="header-anchor" href="#_3-3-对象的访问定位"><span>3.3 对象的访问定位</span></a></h3><p>对象创建后，Java 程序就可以通过栈上的 <code>reference</code>（也就是引用）来操作堆上的具体对象。</p><p>《Java 虚拟机规范》规定 <code>reference</code> 是一个指向对象的引用，但并未规定其具体实现方式。主流的方式方式有以下两种：</p><ul><li><strong>句柄访问</strong>：Java 堆将划分出一块内存来作为句柄池， <code>reference</code> 中存储的是对象的句柄地址，而句柄则包含了对象实例数据和类型数据的地址信息。</li><li><strong>指针访问</strong>：<code>reference</code> 中存储的直接就是对象地址，而对象的类型数据则由上文介绍的对象头中的类型指针来指定。</li></ul><p>通过句柄访问对象：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f6b5eb22-a5af-40c0-8c80-00fdd6d16b1d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过直接指针访问对象：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f696f4a8-af51-4e28-9d72-c2f6b1e5b3db.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>句柄访问的优点在于对象移动时（<a href="https://javabetter.cn/jvm/gc.html" target="_blank" rel="noopener noreferrer">垃圾收集</a>时移动对象是非常普遍的行为）只需要改变句柄中实例数据的指针，而 <code>reference</code> 本身并不需要修改；</p><p>指针访问则反之，由于其 <code>reference</code> 中存储的直接就是对象地址，所以当对象移动时， <code>reference</code> 需要被修改。但针对只需要访问对象本身的场景，指针访问则可以减少一次定位开销。由于对象访问是一项非常频繁的操作，所以这类减少的效果会非常显著，基于这个原因，<strong>HotSpot 主要使用的是指针访问的方式</strong>。</p><h2 id="四、垃圾收集机制" tabindex="-1"><a class="header-anchor" href="#四、垃圾收集机制"><span>四、垃圾收集机制</span></a></h2><p>在 <a href="https://javabetter.cn/jvm/neicun-jiegou.html" target="_blank" rel="noopener noreferrer">JVM 内存模型</a>中，程序计数器、虚拟机栈、本地方法栈这 3 个区域都是线程私有的，会随着线程的结束而销毁，因此在这 3 个区域当中，无需过多考虑垃圾回收问题。垃圾回收问题主要发生在 Java 堆上。</p><p>在 Java 堆上，垃圾回收的主要内容是死亡的对象（不可能再被任何途径使用的对象）。</p><p>判断对象是否死亡有以下两种方法：</p><h3 id="_1-引用计数法" tabindex="-1"><a class="header-anchor" href="#_1-引用计数法"><span>1. 引用计数法</span></a></h3><p>在对象中添加一个引用计数器，对象每次被引用时，该计数器加一；当引用失效时，计数器的值减一；只要计数器的值为零，则代表对应的对象不可能再被使用。该方法的缺点在于无法避免相互引用的问题：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objB</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objA    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">objA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">objB </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，此时两个对象已经不能再被访问，但其互相持有对对方的引用，如果采用引用计数法，则两个对象都无法被回收。</p><h3 id="_2-可达性分析" tabindex="-1"><a class="header-anchor" href="#_2-可达性分析"><span>2. 可达性分析</span></a></h3><p>但上面的代码在大多数虚拟机中都能被正确的回收，因为大多数主流的虚拟机都是采用的可达性分析方法来判断对象是否死亡。</p><p>可达性分析是通过一系列被称为 <code>GC Roots</code> 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径被称为引用链（Reference Chain），如果某个对象到 <code>GC Roots</code> 间没有任何引用链相连，这代表 <code>GC Roots</code> 到该对象不可达， 此时证明该对象不可能再被使用。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/gc-20231227104036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Java 语言中，固定可作为 <code>GC Roots</code> 的对象包括以下几种：</p><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的<strong>参数、局部变量、临时变量</strong>等；</li><li>在方法区（元空间）中类静态变量引用的对象，譬如 Java 类中引用类型的静态变量；</li><li>在方法区（元空间）中常量引用的对象，譬如<a href="https://javabetter.cn/string/constant-pool.html" target="_blank" rel="noopener noreferrer">字符串常量池</a>（String Table）里的引用；</li><li>在本地方法栈中的 JNI（<a href="https://javabetter.cn/oo/native-method.html" target="_blank" rel="noopener noreferrer">Native 方法</a>）引用的对象；</li><li>Java 虚拟机内部的引用，如<a href="https://javabetter.cn/basic-grammar/basic-data-type.html" target="_blank" rel="noopener noreferrer">基本数据类型对应的 Class 对象</a>，一些常驻的<a href="https://javabetter.cn/exception/gailan.html" target="_blank" rel="noopener noreferrer">异常对象</a>（如 NullPointException，OutOfMemoryError 等）及系统类加载器；</li><li>所有被同步锁（<a href="https://javabetter.cn/thread/synchronized-1.html" target="_blank" rel="noopener noreferrer">synchronized 关键字</a>）持有的对象；</li></ul><p>除了这些固定的 <code>GC Roots</code> 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域的不同，还可能会有其他对象 “临时性” 地加入，共同构成完整的 <code>GC Roots</code> 集合。</p><h3 id="_3-对象引用" tabindex="-1"><a class="header-anchor" href="#_3-对象引用"><span>3. 对象引用</span></a></h3><p>可达性分析是基于引用链进行判断的，在 JDK 1.2 之后，Java 将引用关系分为以下四类：</p><h4 id="强引用-strongly-reference" tabindex="-1"><a class="header-anchor" href="#强引用-strongly-reference"><span>强引用 (Strongly Reference)</span></a></h4><p>最传统的引用，如 <code>Object obj = new Object()</code> 。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p><h4 id="软引用-soft-reference" tabindex="-1"><a class="header-anchor" href="#软引用-soft-reference"><span>软引用 (Soft Reference)</span></a></h4><p>用于描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生<a href="https://javabetter.cn/jvm/oom.html" target="_blank" rel="noopener noreferrer">内存溢出</a>之前，会被列入回收范围内进行第二次回收，如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</p><p>下面是一个使用 Java 中 SoftReference 类的示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SoftReferenceExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个强引用的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> strongReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;二哥，我是个强引用&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个软引用，指向上面的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SoftReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">softReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SoftReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(strongReference);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 干掉强引用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        strongReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 现在只有软引用指向 &quot;二哥，我是个强引用&quot; 对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 尝试通过软引用获取对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> retrievedString</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> softReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(retrievedString); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出 &quot;二哥，我是个强引用&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 强制进行垃圾回收，可能会清除软引用的对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 再次尝试通过软引用获取对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        retrievedString </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> softReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (retrievedString </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(retrievedString);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;软引用的对象已被垃圾回收&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们首先创建了一个字符串对象的强引用，然后通过 SoftReference 创建了这个对象的软引用。在取消了强引用后，这个对象只剩下软引用。当我们尝试通过软引用获取对象时，如果对象还存在，软引用会返回它；如果对象已被垃圾收集器回收，则返回 null。</p><p>需要注意的是，第二次回收时，如果这次回收后还没有足够的内存，才会抛出内存溢出异常。这里的 “足够” 是指在抛出内存溢出异常之前，系统会进行最后一次尝试，如果这次回收后还是没有足够的内存，才会抛出内存溢出异常。</p><p>通常情况下，上面代码在执行 gc 后软引用不会被回收，因为此时内存还是足够的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>二哥，我是个强引用</span></span>
<span class="line"><span>二哥，我是个强引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="弱引用-weak-reference" tabindex="-1"><a class="header-anchor" href="#弱引用-weak-reference"><span>弱引用 (Weak Reference)</span></a></h4><p>用于描述那些非必须的对象，强度比软引用弱。被弱引用关联的对象只能生存到下一次垃圾收集发生时，无论当前内存是否足够，弱引用对象都会被回收。</p><p>来看这段代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WeakReferenceExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个强引用的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> strongReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;二哥，我是强引用&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个弱引用，指向上面的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        WeakReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">weakReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WeakReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(strongReference);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 取消强引用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        strongReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 强制进行垃圾回收</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 尝试通过弱引用获取对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> retrievedString</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> weakReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (retrievedString </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(retrievedString);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;弱引用的对象已被垃圾回收&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们首先创建了一个字符串对象的强引用，然后通过 WeakReference 创建了这个对象的弱引用。在取消了强引用后，这个对象只剩下弱引用。当我们尝试通过弱引用获取对象时，如果对象还存在，弱引用会返回它；如果对象已被垃圾收集器回收，则返回 null。</p><p>运行结果就和软引用不一样了，gc 后弱引用被回收了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>弱引用的对象已被垃圾回收</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="虚引用-phantom-reference" tabindex="-1"><a class="header-anchor" href="#虚引用-phantom-reference"><span>虚引用 (Phantom Reference)</span></a></h4><p>最弱的引用关系。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被回收时收到一个系统通知。</p><p>虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾收集器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入到与之关联的引用队列中。</p><p>来看这个示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PhantomReferenceExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个强引用的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> strongReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;二哥，我是强引用&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个引用队列</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ReferenceQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">referenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建一个虚引用，指向上面的对象，并与引用队列关联</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        PhantomReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">phantomReference</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PhantomReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(strongReference, referenceQueue);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 取消强引用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        strongReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 强制进行垃圾回收</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 检查引用队列，看是否有通知</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">referenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;虚引用的对象已被垃圾回收，且收到了通知&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;虚引用的对象未被垃圾回收，或未收到通知&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们首先创建了一个字符串对象的强引用，然后通过 PhantomReference 创建了这个对象的虚引用，并与引用队列关联。在取消了强引用后，这个对象只剩下虚引用。当我们强制进行垃圾回收时，如果对象还存在，虚引用不会返回它；如果对象已被垃圾收集器回收，则返回 null。同时，如果对象被回收，虚引用会被加入到引用队列中。</p><p>运行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>虚引用的对象已被垃圾回收，且收到了通知</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-对象真正死亡" tabindex="-1"><a class="header-anchor" href="#_4-对象真正死亡"><span>4. 对象真正死亡</span></a></h3><p>要真正宣告一个对象死亡，需要经过至少两次标记过程：</p><p>①、如果对象在进行可达性分析后发现 <code>GC Roots</code> 不可达，将会进行第一次标记；</p><p>②、随后进行一次筛选，筛选的条件是此对象是否有必要执行 <code>finalized()</code> 方法。</p><p>如果对象没有覆盖 <code>finalized()</code> 方法，或者 <code>finalized()</code> 已经被虚拟机调用过，这两种情况都会视为没有必要执行。</p><p>如果判定结果是有必要执行，此时对象会被放入名为 <code>F-Queue</code> 的队列，等待 Finalizer 线程执行其 <code>finalized()</code> 方法。</p><p>在这个过程中，收集器会进行第二次小规模的标记，如果对象在 <code>finalized()</code> 方法中重新将自己与引用链上的任何一个对象进行了关联，如将自己（<a href="https://javabetter.cn/oo/this-super.html" target="_blank" rel="noopener noreferrer">this 关键字</a>）赋值给某个类变量或者对象的成员变量，此时它就实现了自我拯救，则第二次标记会将其移除 “即将回收” 的集合，否则该对象就将被真正回收，走向死亡。</p><h3 id="_4-3-垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#_4-3-垃圾收集算法"><span>4.3 垃圾收集算法</span></a></h3><h4 id="_1-分代收集理论" tabindex="-1"><a class="header-anchor" href="#_1-分代收集理论"><span>1. 分代收集理论</span></a></h4><p>当前大多数虚拟机都遵循 “分代收集” 的理论进行设计，它建立在强弱两个分代假说下：</p><ul><li><strong>弱分代假说 (Weak Generational Hypothesis)</strong> ：绝大多数对象都是朝生夕灭的。</li><li><strong>强分代假说 (Strong Generational Hypothesis)</strong> ：熬过越多次垃圾收集过程的对象就越难以消亡。</li><li><strong>跨带引用假说 (Intergenerational Reference Hypothesis)</strong> ：基于上面两条假说还可以得出的一条隐含推论：存在相互引用关系的两个对象，应该倾向于同时生存或者同时消亡。</li></ul><p>强弱分代假说奠定了垃圾收集器的设计原则：<strong>收集器应该将 Java 堆划分出不同的区域</strong>，然后将回收对象依据其年龄（年龄就是对象经历垃圾收集的次数）分配到不同的区域中进行存储。</p><p>之后如果一个区域中的对象都是朝生夕灭的，那么收集器只需要关注少量对象的存活而不是去标记那些大量将要被回收的对象，此时就能以较小的代价获取较大的空间。</p><p>最后再将难以消亡的对象集中到一块，根据强分代假说，它们是很难消亡的，因此虚拟机可以使用较低的频率进行回收，这就兼顾了时间和内存空间的开销。</p><h4 id="_2-回收类型" tabindex="-1"><a class="header-anchor" href="#_2-回收类型"><span>2. 回收类型</span></a></h4><p>根据分代收集理论，收集范围可以分为以下几种类型：</p><p>①、<strong>部分收集 (Partial GC)</strong> ：具体分为：</p><ul><li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li><li><strong>整堆收集 (Full GC)</strong> ：收集整个 Java 堆和方法区。</li></ul><h4 id="_3-标记-清除算法" tabindex="-1"><a class="header-anchor" href="#_3-标记-清除算法"><span>3. 标记-清除算法</span></a></h4><p>它是最基础的垃圾收集算法，收集过程分为两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象；也可以反过来，标记存活对象，统一回收所有未被标记的对象。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-7d489254-f1e0-4feb-bd4a-af129767a787.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它主要有以下两个缺点：</p><ul><li>执行效率不稳定：如果 Java 堆上包含大量需要回收的对象，则需要进行大量标记和清除动作；</li><li>内存空间碎片化：标记清除后会产生大量不连续的空间，从而导致无法为大对象分配足够的连续内存。</li></ul><h4 id="_4-标记-复制算法" tabindex="-1"><a class="header-anchor" href="#_4-标记-复制算法"><span>4. 标记-复制算法</span></a></h4><p>标记-复制算法基于 ”半区复制“ 算法：它将可用内存按容量划分为大小相等的两块，每次只使用其中一块，当这一块的内存使用完了，就将还存活着的对象复制到另外一块，然后再把已经使用过的那块内存空间一次性清理掉。其优点在于避免了内存空间碎片化的问题，其缺点如下：</p><ul><li>如果内存中多数对象都是存活的，这种算法将产生大量的复制开销；</li><li>浪费内存空间，内存空间变为了原有的一半。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f4572b93-f7f3-41cc-9901-93816e79c789.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基于新生代 “朝生夕灭” 的特点，大多数虚拟机都不会按照 1:1 的比例来进行内存划分，例如 HotSpot 会将内存空间划分为一块较大的 <code>Eden</code> 和两块较小的 <code>Survivor</code> 空间，它们之间的比例是 8:1:1 。</p><p>每次分配时只会使用 <code>Eden</code> 和其中的一块 <code>Survivor</code> ，发生垃圾回收时，只需要将存活的对象一次性复制到另外一块 <code>Survivor</code> 上，这样只有 10% 的内存空间会被浪费掉。</p><p>当 <code>Survivor</code> 空间不足以容纳一次 <code>Minor GC</code> 时，此时由其他内存区域（通常是老年代）来进行分配担保。</p><h4 id="_5-标记-整理算法" tabindex="-1"><a class="header-anchor" href="#_5-标记-整理算法"><span>5. 标记-整理算法</span></a></h4><p>标记-整理算法是在标记完成后，让所有存活对象都向内存的一端移动，然后直接清理掉边界以外的内存。</p><p>其优点在于可以避免内存空间碎片化的问题，也可以充分利用内存空间；其缺点在于根据所使用的收集器的不同，在移动存活对象时可能要全程暂停用户程序：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-e674c49f-c55b-4eba-95ea-34be62d55a78.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="五、垃圾收集器" tabindex="-1"><a class="header-anchor" href="#五、垃圾收集器"><span>五、垃圾收集器</span></a></h2><p>并行与并发是<a href="https://javabetter.cn/thread/" target="_blank" rel="noopener noreferrer">并发编程</a>中的专有名词，在谈论垃圾收集器的上下文语境中，它们的含义如下：</p><p>①、<strong>并行 (Parallel)</strong> ：并行描述的是多条垃圾收集器线程之间的关系，说明同一时间有多条这样的线程在协同工作，此时通常默认用户线程是处于等待状态。</p><p>②、<strong>并发 (Concurrent)</strong> ：并发描述的是垃圾收集器线程与用户线程之间的关系，说明同一时间垃圾收集器线程与用户线程都在运行。但由于垃圾收集器线程会占用一部分系统资源，所以程序的吞吐量依然会受到一定影响。</p><p>HotSpot 中一共存在七款经典的<a href="https://javabetter.cn/jvm/gc-collector.html" target="_blank" rel="noopener noreferrer">垃圾收集器</a>：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-1fa20f99-d203-42d6-982c-f1bd66a0c929.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注：收集器之间存在连线，代表它们可以搭配使用。</p></blockquote><h3 id="_5-1-serial-收集器" tabindex="-1"><a class="header-anchor" href="#_5-1-serial-收集器"><span>5.1 Serial 收集器</span></a></h3><p>Serial 收集器是最基础、历史最悠久的收集器，它是一个单线程收集器，在进行垃圾回收时，必须暂停其他所有的工作线程，直到收集结束，这是其主要缺点。</p><p>它的优点在于单线程避免了多线程复杂的上下文切换，因此在单线程环境下收集效率非常高，由于这个优点，迄今为止，其仍然是 HotSpot 虚拟机在客户端模式下默认的新生代收集器：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-ec6ec994-6fe4-4d5b-890c-7f31b5a607a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-2-parnew-收集器" tabindex="-1"><a class="header-anchor" href="#_5-2-parnew-收集器"><span>5.2 ParNew 收集器</span></a></h3><p>它是 Serial 收集器的多线程版本，可以使用多条线程进行垃圾回收：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-ae8c47c7-538b-426a-85e4-d422d1c37683.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-3-parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#_5-3-parallel-scavenge-收集器"><span>5.3 Parallel Scavenge 收集器</span></a></h3><p>Parallel Scavenge 也是新生代收集器，基于 标记-复制 算法进行实现，它的目标是达到一个可控的吞吐量。这里的吞吐量指的是处理器运行用户代码的时间与处理器总消耗时间的比值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>吞吐量 = 运行用户代码时间 \\ (运行用户代码时间 + 运行垃圾收集时间)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Parallel Scavenge 收集器提供两个参数用于精确控制吞吐量：</p><p>①、<code>-XX:MaxGCPauseMillis</code>：控制最大垃圾收集时间，假设需要回收的垃圾总量不变，那么降低垃圾收集的时间就会导致收集频率变高，所以需要将其设置为合适的值，不能一味减小。</p><p>②、<code>-XX:MaxGCTimeRatio</code>：直接用于设置吞吐量大小，它是一个大于 0 小于 100 的整数。假设把它设置为 19，表示此时允许的最大垃圾收集时间占总时间的 5%（即 1/(1+19) ）；默认值为 99 ，即允许最大 1%（ 1/(1+99) ）的垃圾收集时间。</p><h3 id="_5-4-serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#_5-4-serial-old-收集器"><span>5.4 Serial Old 收集器</span></a></h3><p>从名字也能看出来，它是 Serial 收集器的老年代版本，同样是一个单线程收集器，采用 标记-整理 算法，主要用于给客户端模式下的 HotSpot 使用：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-b199ece2-8de2-4f24-b50a-ea0c0d16bd7b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-5-paralled-old-收集器" tabindex="-1"><a class="header-anchor" href="#_5-5-paralled-old-收集器"><span>5.5 Paralled Old 收集器</span></a></h3><p>Paralled Old 是 Parallel Scavenge 收集器的老年代版本，支持多线程并发收集，采用 标记-整理 算法实现：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-30dd34d5-27df-4a6f-b391-5a7928dfb3ab.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-6-cms-收集器" tabindex="-1"><a class="header-anchor" href="#_5-6-cms-收集器"><span>5.6 CMS 收集器</span></a></h3><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于 标记-清除 算法实现，整个收集过程分为以下四个阶段：</p><ol><li><strong>初始标记 (inital mark)</strong> ：标记 <code>GC Roots</code> 能直接关联到的对象，耗时短但需要暂停用户线程；</li><li><strong>并发标记 (concurrent mark)</strong> ：从 <code>GC Roots</code> 能直接关联到的对象开始遍历整个对象图，耗时长但不需要暂停用户线程；</li><li><strong>重新标记 (remark)</strong> ：采用增量更新算法，对并发标记阶段因为用户线程运行而产生变动的那部分对象进行重新标记，耗时比初始标记稍长且需要暂停用户线程；</li><li><strong>并发清除 (inital sweep)</strong> ：并发清除掉已经死亡的对象，耗时长但不需要暂停用户线程。</li></ol><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-7ad8d755-53f2-422a-9cea-c792b0579d8b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其优点在于耗时长的 并发标记 和 并发清除 阶段都不需要暂停用户线程，因此其停顿时间较短，其主要缺点如下：</p><ul><li>由于涉及并发操作，因此对处理器资源比较敏感。</li><li>由于是基于 标记-清除 算法实现的，因此会产生大量空间碎片。</li><li>无法处理浮动垃圾（Floating Garbage）：由于并发清除时用户线程还是在继续，所以此时仍然会产生垃圾，这些垃圾就被称为浮动垃圾，只能等到下一次垃圾收集时再进行清理。</li></ul><h3 id="_5-7-garbage-first-收集器" tabindex="-1"><a class="header-anchor" href="#_5-7-garbage-first-收集器"><span>5.7 Garbage First 收集器</span></a></h3><p>Garbage First（简称 G1）是一款面向服务端的垃圾收集器，也是 JDK 9 服务端模式下默认的垃圾收集器，它的诞生具有里程碑式的意义。</p><p>G1 虽然也遵循分代收集理论，但不再以固定大小和固定数量来划分分代区域，而是把连续的 Java 堆划分为多个大小相等的独立区域（Region）。每一个 Region 都可以根据不同的需求来扮演新生代的 <code>Eden</code> 空间、<code>Survivor</code> 空间或者老年代空间，收集器会根据其扮演角色的不同而采用不同的收集策略。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-e0f5da26-6e46-4f9d-bfcc-0842cc7079e7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面还有一些 Region 使用 H 进行标注，它代表 Humongous，表示这些 Region 用于存储大对象（humongous object，H-obj），即大小大于等于 region 一半的对象。</p><p>G1 收集器的运行大致可以分为以下四个步骤：</p><p>①、<strong>初始标记 (Inital Marking)</strong> ：标记 <code>GC Roots</code> 能直接关联到的对象，并且修改 TAMS（Top at Mark Start）指针的值，让下一阶段用户线程并发运行时，能够正确的在 Reigin 中分配新对象。</p><p>G1 为每一个 Reigin 都设计了两个名为 TAMS 的指针，新分配的对象必须位于这两个指针位置以上，位于这两个指针位置以上的对象默认被隐式标记为存活的，不会纳入回收范围；</p><p>②、<strong>并发标记 (Concurrent Marking)</strong> ：从 <code>GC Roots</code> 能直接关联到的对象开始遍历整个对象图。遍历完成后，还需要处理 SATB 记录中变动的对象。</p><p>SATB（snapshot-at-the-beginning，开始阶段快照）能够有效的解决并发标记阶段因为用户线程运行而导致的对象变动，其效率比 CMS 重新标记阶段所使用的增量更新算法效率更高；</p><p>③、<strong>最终标记 (Final Marking)</strong> ：对用户线程做一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的少量的 STAB 记录。虽然并发标记阶段会处理 SATB 记录，但由于处理时用户线程依然是运行中的，因此依然会有少量的变动，所以需要最终标记来处理；</p><p>④、<strong>筛选回收 (Live Data Counting and Evacuation)</strong> ：负责更新 Regin 统计数据，按照各个 Regin 的回收价值和成本进行排序，在根据用户期望的停顿时间进行来指定回收计划，可以选择任意多个 Regin 构成回收集。</p><p>然后将回收集中 Regin 的存活对象复制到空的 Regin 中，再清理掉整个旧的 Regin 。此时因为涉及到存活对象的移动，所以需要暂停用户线程，并由多个收集线程并行执行。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-3cf7a78a-d541-49af-929a-4bf8f4f0edd9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-8-内存分配原则" tabindex="-1"><a class="header-anchor" href="#_5-8-内存分配原则"><span>5.8 内存分配原则</span></a></h3><h4 id="_1-对象优先在-eden-分配" tabindex="-1"><a class="header-anchor" href="#_1-对象优先在-eden-分配"><span>1. 对象优先在 Eden 分配</span></a></h4><p>大多数情况下，对象在新生代的 <code>Eden</code> 区中进行分配，当 <code>Eden</code> 区没有足够空间时，虚拟机将进行一次 Minor GC。</p><h4 id="_2-大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#_2-大对象直接进入老年代"><span>2. 大对象直接进入老年代</span></a></h4><p>大对象就是指需要大量连续内存空间的 Java 对象，最典型的就是超长的字符串或者元素数量很多的数组，它们将直接进入老年代。</p><p>主要是因为如果在新生代分配，因为其需要大量连续的内存空间，可能会导致提前触发垃圾回收；并且由于新生代的垃圾回收本身就很频繁，此时复制大对象也需要额外的性能开销。</p><h4 id="_3-长期存活的对象将进入老年代" tabindex="-1"><a class="header-anchor" href="#_3-长期存活的对象将进入老年代"><span>3. 长期存活的对象将进入老年代</span></a></h4><p>虚拟机会给每个对象在其对象头中定义一个年龄计数器。对象通常在 <code>Eden</code> 区中诞生，如果经历第一次 Minor GC 后仍然存活，并且能够被 Survivor 容纳的话，该对象就会被移动到 Survivor 中，并将其年龄加 1。</p><p>对象在 Survivor 中每经过一次 Minor GC，年龄就加 1，当年龄达到一定程度后（由 <code>-XX:MaxTenuringThreshold</code> 设置，默认值为 15）就会进入老年代中。</p><h4 id="_4-动态年龄判断" tabindex="-1"><a class="header-anchor" href="#_4-动态年龄判断"><span>4. 动态年龄判断</span></a></h4><p>如果在 Survivor 空间中相同年龄的所有对象大小的总和大于 Survivor 空间的一半，那么年龄大于或等于该年龄的对象就可以直接进入老年代，而无需等待年龄到达 <code>-XX:MaxTenuringThreshold</code> 设置的值。</p><h4 id="_5-空间担保分配" tabindex="-1"><a class="header-anchor" href="#_5-空间担保分配"><span>5. 空间担保分配</span></a></h4><p>在发生 Minor GC 之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果条件成立，那么这一次的 Minor GC 可以确认是安全的。</p><p>如果不成立，虚拟机会查看 <code>-XX:HandlePromotionFailure</code> 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于或者 <code>-XX:HandlePromotionFailure</code> 的值设置不允许冒险，那么就要改为进行一次 Full GC 。</p><h2 id="六、类加载机制" tabindex="-1"><a class="header-anchor" href="#六、类加载机制"><span>六、类加载机制</span></a></h2><p>Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称为虚拟机的<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类加载机制</a>。</p><h3 id="_6-1-类加载时机" tabindex="-1"><a class="header-anchor" href="#_6-1-类加载时机"><span>6.1 类加载时机</span></a></h3><p>一个类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历加载、验证、准备、卸载、解析、初始化、使用、卸载七个阶段，其中验证、准备、解析三个部分统称为连接：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/class-load-20231031202641.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>《Java 虚拟机规范》严格规定了有且只有六种情况必须立即对类进行初始化：</p><p>①、遇到 <code>new</code>、 <code>getstatic</code>、 <code>putstatic</code>、 <code>invokestatic</code> 这四条<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a>，能够生成这四条指令码的典型 Java 代码场景有：</p><ul><li>使用 <code>new</code> 关键字实例化对象时；</li><li>读取或设置一个类型的静态字段时（被 <a href="https://javabetter.cn/oo/final.html" target="_blank" rel="noopener noreferrer">final</a> 修饰，已在编译期把结果放入常量池的静态字段除外）；</li><li>调用一个类的<a href="https://javabetter.cn/oo/static.html" target="_blank" rel="noopener noreferrer">静态方法</a>时。</li></ul><p>②、使用 <code>java.lang.reflect</code> 包的方法对 Class 进行<a href="https://javabetter.cn/basic-extra-meal/fanshe.html" target="_blank" rel="noopener noreferrer">反射</a>调用时，如果类型没有进行过初始化、则需要触发其初始化；</p><p>③、当初始化类时，如发现其父类还没有进行过初始化、则需要触发其父类进行初始化；</p><p>④、当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</p><p>⑤、当使用 JDK 7 新加入的动态语言支持时，如果一个 <code>java.lang.invoke.MethodHandle</code> 实例最后解析的结果为 <code>REF_getStatic</code> ， <code>REF_putStatic</code> ， <code>REF_invokeStatic</code> ， <code>REF_newInvokeSpecial</code> 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化；</p><p>⑥、当一个<a href="https://javabetter.cn/oo/interface.html" target="_blank" rel="noopener noreferrer">接口</a>中定义了 JDK 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那么该接口要在其之前被初始化。</p><h3 id="_6-2-类加载过程" tabindex="-1"><a class="header-anchor" href="#_6-2-类加载过程"><span>6.2 类加载过程</span></a></h3><h4 id="_1-加载" tabindex="-1"><a class="header-anchor" href="#_1-加载"><span>1. 加载</span></a></h4><p>在加载阶段，虚拟机需要完成以下三件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流 ；</li><li>将这个字节流所代表的静态存储结构转换为<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">运行时数据结构</a>；</li><li>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为这个类的各种数据的访问入口。</li></ul><p>《Java 虚拟机规范》并没有限制从何处获取二进制流，因此可以从 JAR 包、WAR 包获取，也可以从 JSP 生成的 Class 文件等处获取。</p><h4 id="_2-验证" tabindex="-1"><a class="header-anchor" href="#_2-验证"><span>2. 验证</span></a></h4><p>这一阶段的目的是确保 Class 文件的字节流中包含的信息符合《Java 虚拟机规范》的全部约束要求，从而保证这些信息被当做代码运行后不会危害虚拟机自身的安全。</p><p>验证阶段大致会完成下面四项验证：</p><ul><li><strong>文件格式验证</strong>：验证字节流是否符合 Class 文件格式的规范；</li><li><strong>元数据验证</strong>：对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java 语言规范》的要求（如除了 <code>java.lang.Object</code> 外，所有的类都应该有父类）；</li><li><strong>字节码验证</strong>：通过数据流分析和控制流分析，确定程序语义是合法的，符合逻辑的（如允许把子类对象赋值给父类数据类型，但不能把父类对象赋值给子类数据类型）；</li><li><strong>符号引用验证</strong>：验证类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。如果无法验证通过，则会抛出一个<code>java.lang.IncompatibleClassChangeError</code> 的子类异常，如 <code>java.lang.NoSuchFieldError</code> 、 <code>java.lang.NoSuchMethodError</code> 等。</li></ul><h4 id="_3-准备" tabindex="-1"><a class="header-anchor" href="#_3-准备"><span>3. 准备</span></a></h4><p>准备阶段是正式为类中定义的变量（即<a href="https://javabetter.cn/oo/static.html" target="_blank" rel="noopener noreferrer">静态变量</a>，被 static 修饰的变量）分配内存并设置类变量初始值的阶段。</p><h4 id="_4-解析" tabindex="-1"><a class="header-anchor" href="#_4-解析"><span>4. 解析</span></a></h4><p>解析是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程：</p><ul><li><strong>符号引用</strong>：符号引用用一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。</li><li><strong>直接引用</strong>：直接引用是指可以直接指向目标的指针、相对偏移量或者一个能间接定位到目标的句柄。</li></ul><p>整个解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符这 7 类符号引用进行解析。</p><h4 id="_5-初始化" tabindex="-1"><a class="header-anchor" href="#_5-初始化"><span>5. 初始化</span></a></h4><p>初始化阶段就是执行类构造器的 <code>&lt;clinit&gt;()</code> 方法的过程，该方法具有以下特点：</p><ul><li><code>&lt;clinit&gt;()</code> 方法由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生，编译器收集顺序由语句在源文件中出现的顺序决定。</li><li><code>&lt;clinit&gt;()</code> 方法与类的构造方法（即在虚拟机视角中的实例构造器 <code>&lt;init&gt;()</code>方法）不同，它不需要显示的调用父类的构造器，Java 虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</li><li>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，也就意味着父类中定义的静态语句块要优先于子类变量的赋值操作。</li><li><code>&lt;clinit&gt;()</code> 方法对于类或者接口不是必须的，如果一个类中没有静态语句块，也没有对变量进行赋值操作，那么编译器可以不为这个类生成 <code>&lt;clinit&gt;()</code> 方法。</li><li>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成 <code>&lt;clinit&gt;()</code> 方法。</li><li>Java 虚拟机必须保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确的加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其他线程都需要阻塞等待。</li></ul><h3 id="_6-3-类加载器" tabindex="-1"><a class="header-anchor" href="#_6-3-类加载器"><span>6.3 类加载器</span></a></h3><p>能够通过一个类的全限定名来获取描述该类的二进制字节流的工具称为<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类加载器</a>。</p><p>每一个类加载器都拥有一个独立的类名空间，因此对于任意一个类，都必须由加载它的类加载器和这个类本身来共同确立其在 Java 虚拟机中的唯一性。</p><p>这意味着要想比较两个类是否相等，必须在同一类加载器加载的前提下；如果两个类的类加载器不同，则它们一定不相等。</p><h3 id="_6-4-双亲委派模型" tabindex="-1"><a class="header-anchor" href="#_6-4-双亲委派模型"><span>6.4 双亲委派模型</span></a></h3><p>从 Java 虚拟机角度而言，类加载器可以分为以下两类：</p><ul><li><strong>启动类加载器</strong> ：启动类加载器（Bootstrap ClassLoader）由 C++ 语言实现（以 HotSpot 为例），它是虚拟机自身的一部分；</li><li><strong>其他所有类的类加载器</strong> ：由 Java 语言实现，独立存在于虚拟机外部，并且全部继承自 <code>java.lang.ClassLoader</code> 。</li></ul><p>从开发人员角度而言，类加载器可以分为以下三类：</p><ul><li><strong>启动类加载器 (Boostrap Class Loader)</strong> ：负责把存放在 <code>&lt;JAVA_HOME&gt;\\lib</code> 目录中，或被 <code>-Xbootclasspath</code> 参数所指定的路径中存放的能被 Java 虚拟机识别的类库加载到虚拟机的内存中；</li><li><strong>扩展类加载器 (Extension Class Loader)</strong> ：负责加载 <code>&lt;JAVA_HOME&gt;\\lib\\ext</code> 目录中，或被 <code>java.ext.dirs</code> 系统变量所指定的路径中的所有类库。</li><li><strong>应用程序类加载器 (Application Class Loader)</strong> ：负责加载用户类路径（ClassPath）上的所有的类库。</li></ul><p>JDK 9 之前的 Java 应用都是由这三种类加载器相互配合来完成加载：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-c1fcdc37-4e5a-4ed3-94b1-ad4afa2dba7c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图所示的各种类加载器之间的层次关系被称为类加载器的 “双亲委派模型”，“双亲委派模型” 要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，需要注意的是这里的加载器之间的父子关系一般不是以继承关系来实现的，而是使用组合关系来复用父类加载器的代码。</p><p>双亲委派模型的工作过程如下：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p><p>基于双亲委派模型可以保证程序中的类在各种类加载器环境中都是同一个类，否则就有可能出现一个程序中存在两个不同的 <code>java.lang.Object</code> 的情况。</p><h3 id="_6-5-模块化下的类加载器" tabindex="-1"><a class="header-anchor" href="#_6-5-模块化下的类加载器"><span>6.5 模块化下的类加载器</span></a></h3><p>JDK 9 之后为了适应模块化的发展，类加载器做了如下变化：</p><ul><li>仍维持三层类加载器和双亲委派的架构，但扩展类加载器被平台类加载器所取代；</li><li>当平台及应用程序类加载器收到类加载请求时，要首先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载；</li><li>启动类加载器、平台类加载器、应用程序类加载器全部继承自 <code>java.internal.loader.BuiltinClassLoader</code> ，BuiltinClassLoader 中实现了新的模块化架构下类如何从模块中加载的逻辑，以及模块中资源可访问性的处理。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-04b18ddb-3457-4e46-ba53-78237d234e37.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="七、程序编译" tabindex="-1"><a class="header-anchor" href="#七、程序编译"><span>七、程序编译</span></a></h2><h3 id="_7-1-编译器分类" tabindex="-1"><a class="header-anchor" href="#_7-1-编译器分类"><span>7.1 编译器分类</span></a></h3><ul><li><strong>前端编译器</strong>：把 <code>*.java</code> 文件转变成 <code>.class</code> 文件的过程；如 JDK 的 Javac，Eclipse JDT 中的增量式编译器。</li><li><strong>即时编译器</strong>：常称为 <a href="https://javabetter.cn/jvm/jit.html" target="_blank" rel="noopener noreferrer">JIT 编译器（Just In Time Complier）</a>，在运行期把字节码转变成本地机器码的过程；如 HotSpot 虚拟机中的 C1、C2 编译器，Graal 编译器。</li><li><strong>提前编译器</strong>：直接把程序编译成目标机器指令集相关的二进制代码的过程。如 JDK 的 jaotc，GUN Compiler for the Java（GCJ），Excelsior JET 。</li></ul><h3 id="_7-2-解释器与编译器" tabindex="-1"><a class="header-anchor" href="#_7-2-解释器与编译器"><span>7.2 解释器与编译器</span></a></h3><p>在 HotSpot 中，Java 程序最初都是通过解释器（Interpreter）进行解释执行的，其优点在于可以省去编译时间，让程序快速启动。</p><p>当程序启动后，如果虚拟机发现某个方法或代码块的运行特别频繁，就会使用编译器将其编译为本地机器码，并使用各种手段进行优化，从而提高执行效率，这就是即时编译器。</p><p>HotSpot 内置了两个（或三个）即时编译器：</p><ul><li><strong>客户端编译器 (Client Complier)</strong> ：简称 C1；</li><li><strong>服务端编译器 (Servier Complier)</strong> ：简称 C2，在有的资料和 JDK 源码中也称为 Opto 编译器；</li><li><strong>Graal 编译器</strong> ：在 JDK 10 时才出现，长期目标是替代 C2。</li></ul><p>在分层编译的工作模式出现前，不管是采用客户端编译器还是服务端编译器完全取决于虚拟机是运行在客户端模式还是服务端模式下，可以在启动时通过 <code>-client</code> 或 <code>-server</code> 参数进行指定，也可以让虚拟机根据自身版本和宿主机性能来自主选择。</p><h3 id="_7-3-分层编译" tabindex="-1"><a class="header-anchor" href="#_7-3-分层编译"><span>7.3 分层编译</span></a></h3><p>要编译出优化程度越高的代码通常都需要越长的编译时间，为了在程序启动速度与运行效率之间达到最佳平衡，HotSpot 在编译子系统中加入了分层编译（Tiered Compilation）：</p><ul><li><strong>第 0 层</strong>：程序纯解释执行，并且解释器不开启性能监控功能；</li><li><strong>第 1 层</strong>：使用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开启性能监控功能；</li><li><strong>第 2 层</strong>：仍然使用客户端编译执行，仅开启方法及回边次数统计等有限的性能监控；</li><li><strong>第 3 层</strong>：仍然使用客户端编译执行，开启全部性能监控；</li><li><strong>第 4 层</strong>：使用服务端编译器将字节码编译为本地代码，其耗时更长，并且会根据性能监控信息进行一些不可靠的激进优化。</li></ul><p>以上层次并不是固定不变的，根据不同的运行参数和版本，虚拟机可以调整分层的数量。各层次编译之间的交互转换关系如下图所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-2188c350-fdb8-4fee-b2f0-5311795f386b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实施分层编译后，解释器、客户端编译器和服务端编译器就会同时工作，可以用客户端编译器获取更高的编译速度、用服务端编译器来获取更好的编译质量。</p><h3 id="_7-4-热点探测" tabindex="-1"><a class="header-anchor" href="#_7-4-热点探测"><span>7.4 热点探测</span></a></h3><p>即时编译器编译的目标是 “热点代码”，它主要分为以下两类：</p><ul><li>被多次调用的方法。</li><li>被多次执行循环体。这里指的是一个方法只被少量调用过，但方法体内部存在循环次数较多的循环体，此时也认为是热点代码。但编译器编译的仍然是循环体所在的方法，而不会单独编译循环体。</li></ul><p>判断某段代码是否是热点代码的行为称为 “热点探测” （Hot Spot Code Detection），主流的热点探测方法有以下两种：</p><ul><li><strong>基于采样的热点探测 (Sample Based Hot Spot Code Detection)</strong> ：采用这种方法的虚拟机会周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那么就认为它是 “热点方法”。</li><li><strong>基于计数的热点探测 (Counter Based Hot Spot Code Detection)</strong> ：采用这种方法的虚拟机会为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是 “热点方法”。</li></ul><h2 id="八、代码优化" tabindex="-1"><a class="header-anchor" href="#八、代码优化"><span>八、代码优化</span></a></h2><p>即时编译器除了将字节码编译为本地机器码外，还会对代码进行一定程度的优化，它包含多达几十种优化技术，这里选取其中代表性的四种进行介绍：</p><h3 id="_8-1-方法内联" tabindex="-1"><a class="header-anchor" href="#_8-1-方法内联"><span>8.1 方法内联</span></a></h3><p>最重要的优化手段，它会将目标方法中的代码原封不动地 “复制” 到发起调用的方法之中，避免发生真实的方法调用，并采用名为类型继承关系分析（Class Hierarchy Analysis，CHA）的技术来解决虚方法（Java 语言中默认的实例方法都是虚方法）的内联问题。</p><h3 id="_8-2-逃逸分析" tabindex="-1"><a class="header-anchor" href="#_8-2-逃逸分析"><span>8.2 逃逸分析</span></a></h3><p>逃逸行为主要分为以下两类：</p><ul><li><strong>方法逃逸</strong>：当一个对象在方法里面被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，此时称为方法逃逸；</li><li><strong>线程逃逸</strong>：当一个对象在方法里面被定义后，它可能被外部线程所访问，例如赋值给可以在其他线程中访问的实例变量，此时称为线程逃逸，其逃逸程度高于方法逃逸。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> concat</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> strings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> string </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> strings) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(string);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 发生了方法逃逸</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> concat</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> strings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> string </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> strings) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(string);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 没有发生方法逃逸</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果能证明一个对象不会逃逸到方法或线程之外，或者逃逸程度比较低（只逃逸出方法而不会逃逸出线程），则可以对这个对象实例采取不同程序的优化：</p><ul><li><strong>栈上分配 (Stack Allocations)</strong> ：如果一个对象不会逃逸到线程外，那么将会在栈上分配内存来创建这个对象，而不是 Java 堆上，此时对象所占用的内存空间就会随着栈帧的出栈而销毁，从而可以减轻垃圾回收的压力。</li><li><strong>标量替换 (Scalar Replacement)</strong> ：如果一个数据已经无法再分解成为更小的数据类型，那么这些数据就称为标量（如 int、long 等数值类型及 reference 类型等）；反之，如果一个数据可以继续分解，那它就被称为聚合量（如对象）。如果一个对象不会逃逸外方法外，那么就可以将其改为直接创建若干个被这个方法使用的成员变量来替代，从而减少内存占用。</li><li><strong>同步消除 (Synchronization Elimination)</strong> ：如果一个变量不会逃逸出线程，那么对这个变量实施的同步措施就可以消除掉。</li></ul><h3 id="_8-3-公共子表达式消除" tabindex="-1"><a class="header-anchor" href="#_8-3-公共子表达式消除"><span>8.3 公共子表达式消除</span></a></h3><p>如果一个表达式 E 之前已经被计算过了，并且从先前的计算到现在 E 中所有变量的值都没有发生过变化，那么 E 这次的出现就称为公共子表达式。对于这种表达式，无需再重新进行计算，只需要直接使用前面的计算结果即可。</p><h3 id="_8-4-数组边界检查消除" tabindex="-1"><a class="header-anchor" href="#_8-4-数组边界检查消除"><span>8.4 数组边界检查消除</span></a></h3><p>对于虚拟机执行子系统来说，每次数组元素的读写都带有一次隐含的上下文检查以避免访问越界。如果数组的访问发生在循环之中，并且使用循环变量来访问数据，即循环变量的取值永远在 <code>[0，list.length)</code> 之间，那么此时就可以消除整个循环的数据边界检查，从而避免多次无用的判断。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>这篇内容我们系统地总结了 JVM 最重要的知识点，比如说 JVM 的内存结构、垃圾回收算法、垃圾回收器、类加载机制、类加载器、程序编译、代码优化等等，希望能对大家在学习 JVM 的时候有所帮助。</p><blockquote><ul><li>参考链接：<a href="https://github.com/heibaiying/Full-Stack-Notes" target="_blank" rel="noopener noreferrer">https://github.com/heibaiying/Full-Stack-Notes</a></li><li>整理：沉默王二</li></ul></blockquote><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括Java基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,314)]))}const d=a(t,[["render",l],["__file","zongjie.html.vue"]]),o=JSON.parse('{"path":"/jvm/zongjie.html","title":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点","lang":"zh-CN","frontmatter":{"title":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点","shortTitle":"JVM 核心知识点总结","category":["Java核心"],"tag":["Java虚拟机"],"description":"JVM 核心知识点总结，包括基本概念、Java 内存区域、对象、垃圾收集机制、类加载机制、字节码、JIT、JVM 调优等。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,Java内存模型,Java内存区域,对象,垃圾收集机制,类加载机制,字节码,JIT,JVM调优"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/jvm/zongjie.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点"}],["meta",{"property":"og:description","content":"JVM 核心知识点总结，包括基本概念、Java 内存区域、对象、垃圾收集机制、类加载机制、字节码、JIT、JVM 调优等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/stutymore/zongjie-20240110193338.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/stutymore/zongjie-20240110193338.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20231227111238.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20240110195211.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-afb11e2b-f457-4a19-bb21-f659756061ec.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f6b5eb22-a5af-40c0-8c80-00fdd6d16b1d.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f696f4a8-af51-4e28-9d72-c2f6b1e5b3db.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/gc-20231227104036.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-7d489254-f1e0-4feb-bd4a-af129767a787.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-f4572b93-f7f3-41cc-9901-93816e79c789.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-e674c49f-c55b-4eba-95ea-34be62d55a78.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-1fa20f99-d203-42d6-982c-f1bd66a0c929.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-ec6ec994-6fe4-4d5b-890c-7f31b5a607a0.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-ae8c47c7-538b-426a-85e4-d422d1c37683.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-b199ece2-8de2-4f24-b50a-ea0c0d16bd7b.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-30dd34d5-27df-4a6f-b391-5a7928dfb3ab.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-7ad8d755-53f2-422a-9cea-c792b0579d8b.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-e0f5da26-6e46-4f9d-bfcc-0842cc7079e7.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-3cf7a78a-d541-49af-929a-4bf8f4f0edd9.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/class-load-20231031202641.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-c1fcdc37-4e5a-4ed3-94b1-ad4afa2dba7c.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-04b18ddb-3457-4e46-ba53-78237d234e37.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zongjie-2188c350-fdb8-4fee-b2f0-5311795f386b.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、基本概念","slug":"一、基本概念","link":"#一、基本概念","children":[{"level":3,"title":"1.1 OpenJDK","slug":"_1-1-openjdk","link":"#_1-1-openjdk","children":[]},{"level":3,"title":"1.2 OracleJDK","slug":"_1-2-oraclejdk","link":"#_1-2-oraclejdk","children":[]},{"level":3,"title":"1.3 HotSpot VM","slug":"_1-3-hotspot-vm","link":"#_1-3-hotspot-vm","children":[]}]},{"level":2,"title":"二、Java 内存区域","slug":"二、java-内存区域","link":"#二、java-内存区域","children":[{"level":3,"title":"2.1 程序计数器","slug":"_2-1-程序计数器","link":"#_2-1-程序计数器","children":[]},{"level":3,"title":"2.2 虚拟机栈","slug":"_2-2-虚拟机栈","link":"#_2-2-虚拟机栈","children":[]},{"level":3,"title":"2.3 本地方法栈","slug":"_2-3-本地方法栈","link":"#_2-3-本地方法栈","children":[]},{"level":3,"title":"2.4 堆","slug":"_2-4-堆","link":"#_2-4-堆","children":[]},{"level":3,"title":"2.5 方法区","slug":"_2-5-方法区","link":"#_2-5-方法区","children":[]}]},{"level":2,"title":"三、对象","slug":"三、对象","link":"#三、对象","children":[{"level":3,"title":"3.1 对象的创建","slug":"_3-1-对象的创建","link":"#_3-1-对象的创建","children":[]},{"level":3,"title":"3.2 对象的内存布局","slug":"_3-2-对象的内存布局","link":"#_3-2-对象的内存布局","children":[]},{"level":3,"title":"3.3 对象的访问定位","slug":"_3-3-对象的访问定位","link":"#_3-3-对象的访问定位","children":[]}]},{"level":2,"title":"四、垃圾收集机制","slug":"四、垃圾收集机制","link":"#四、垃圾收集机制","children":[{"level":3,"title":"1. 引用计数法","slug":"_1-引用计数法","link":"#_1-引用计数法","children":[]},{"level":3,"title":"2. 可达性分析","slug":"_2-可达性分析","link":"#_2-可达性分析","children":[]},{"level":3,"title":"3. 对象引用","slug":"_3-对象引用","link":"#_3-对象引用","children":[]},{"level":3,"title":"4. 对象真正死亡","slug":"_4-对象真正死亡","link":"#_4-对象真正死亡","children":[]},{"level":3,"title":"4.3 垃圾收集算法","slug":"_4-3-垃圾收集算法","link":"#_4-3-垃圾收集算法","children":[]}]},{"level":2,"title":"五、垃圾收集器","slug":"五、垃圾收集器","link":"#五、垃圾收集器","children":[{"level":3,"title":"5.1 Serial 收集器","slug":"_5-1-serial-收集器","link":"#_5-1-serial-收集器","children":[]},{"level":3,"title":"5.2 ParNew 收集器","slug":"_5-2-parnew-收集器","link":"#_5-2-parnew-收集器","children":[]},{"level":3,"title":"5.3 Parallel Scavenge 收集器","slug":"_5-3-parallel-scavenge-收集器","link":"#_5-3-parallel-scavenge-收集器","children":[]},{"level":3,"title":"5.4 Serial Old 收集器","slug":"_5-4-serial-old-收集器","link":"#_5-4-serial-old-收集器","children":[]},{"level":3,"title":"5.5 Paralled Old 收集器","slug":"_5-5-paralled-old-收集器","link":"#_5-5-paralled-old-收集器","children":[]},{"level":3,"title":"5.6 CMS 收集器","slug":"_5-6-cms-收集器","link":"#_5-6-cms-收集器","children":[]},{"level":3,"title":"5.7 Garbage First 收集器","slug":"_5-7-garbage-first-收集器","link":"#_5-7-garbage-first-收集器","children":[]},{"level":3,"title":"5.8 内存分配原则","slug":"_5-8-内存分配原则","link":"#_5-8-内存分配原则","children":[]}]},{"level":2,"title":"六、类加载机制","slug":"六、类加载机制","link":"#六、类加载机制","children":[{"level":3,"title":"6.1 类加载时机","slug":"_6-1-类加载时机","link":"#_6-1-类加载时机","children":[]},{"level":3,"title":"6.2 类加载过程","slug":"_6-2-类加载过程","link":"#_6-2-类加载过程","children":[]},{"level":3,"title":"6.3 类加载器","slug":"_6-3-类加载器","link":"#_6-3-类加载器","children":[]},{"level":3,"title":"6.4 双亲委派模型","slug":"_6-4-双亲委派模型","link":"#_6-4-双亲委派模型","children":[]},{"level":3,"title":"6.5 模块化下的类加载器","slug":"_6-5-模块化下的类加载器","link":"#_6-5-模块化下的类加载器","children":[]}]},{"level":2,"title":"七、程序编译","slug":"七、程序编译","link":"#七、程序编译","children":[{"level":3,"title":"7.1 编译器分类","slug":"_7-1-编译器分类","link":"#_7-1-编译器分类","children":[]},{"level":3,"title":"7.2 解释器与编译器","slug":"_7-2-解释器与编译器","link":"#_7-2-解释器与编译器","children":[]},{"level":3,"title":"7.3 分层编译","slug":"_7-3-分层编译","link":"#_7-3-分层编译","children":[]},{"level":3,"title":"7.4 热点探测","slug":"_7-4-热点探测","link":"#_7-4-热点探测","children":[]}]},{"level":2,"title":"八、代码优化","slug":"八、代码优化","link":"#八、代码优化","children":[{"level":3,"title":"8.1 方法内联","slug":"_8-1-方法内联","link":"#_8-1-方法内联","children":[]},{"level":3,"title":"8.2 逃逸分析","slug":"_8-2-逃逸分析","link":"#_8-2-逃逸分析","children":[]},{"level":3,"title":"8.3 公共子表达式消除","slug":"_8-3-公共子表达式消除","link":"#_8-3-公共子表达式消除","children":[]},{"level":3,"title":"8.4 数组边界检查消除","slug":"_8-4-数组边界检查消除","link":"#_8-4-数组边界检查消除","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648354033000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":47.06,"words":14119},"filePathRelative":"jvm/zongjie.md","localizedDate":"2022年3月27日","excerpt":"\\n<h2>一、基本概念</h2>\\n<h3>1.1 OpenJDK</h3>\\n<p>自 1996 年 <code>JDK 1.0</code> 发布以来，Sun 公司在大版本上发行了 <code>JDK 1.1</code>、<code>JDK 1.2</code>、<code>JDK 1.3</code>、<code>JDK 1.4</code>、<code>JDK 5</code>，<code>JDK 6</code> ，这些版本的 JDK 都可以统称为 SunJDK 。</p>\\n<p>之后在 2006 年的 JavaOne 大会上，Sun 公司宣布将 Java 开源，在随后的一年多里，它陆续将 JDK 的各个部分在 GPL v2（GNU General Public License，version 2）协议下开源，并建立了 OpenJDK 组织来对这些代码进行独立的管理，这就是 OpenJDK 的来源，此时的 OpenJDK 拥有当时 sunJDK 7 的几乎全部代码。</p>"}');export{d as comp,o as data};
