import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as t,o as s}from"./app-BeHkqkE2.js";const n={};function r(l,e){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="第六节-栈虚拟机和寄存器虚拟机" tabindex="-1"><a class="header-anchor" href="#第六节-栈虚拟机和寄存器虚拟机"><span>第六节：栈虚拟机和寄存器虚拟机</span></a></h1><p>本来这节内容是打算直接讲字节码指令的，但讲之前又必须得先讲指令集架构，而指令集架构又分为两种，一种是基于栈的，一种是基于寄存器的。</p><p>那不妨我们这节就单独来讲讲栈虚拟机和寄存器虚拟机，它们有什么不同，以及各自的优缺点。</p><h2 id="栈和寄存器" tabindex="-1"><a class="header-anchor" href="#栈和寄存器"><span>栈和寄存器</span></a></h2><p>关于栈这个数据结构，我们前面曾讲过，戳<a href="https://javabetter.cn/collection/stack.html" target="_blank" rel="noopener noreferrer">链接</a>直达。</p><p>寄存器（Register）是中央处理器（CPU）内用来暂存指令、数据和地址的存储器，也是 CPU 中读写最快的存储器。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221150449.png" alt="图片来源于cxuan" tabindex="0" loading="lazy"><figcaption>图片来源于cxuan</figcaption></figure><p>从硬件层面来说，栈位于内存当中，而寄存器位于 CPU 当中，这也是为什么，我们通常会说，基于寄存器架构的虚拟机会比基于栈的虚拟机快的原因。</p><h2 id="基于栈的虚拟机" tabindex="-1"><a class="header-anchor" href="#基于栈的虚拟机"><span>基于栈的虚拟机</span></a></h2><p>前面我们讲 JDK 的<a href="https://javabetter.cn/jvm/what-is-jvm.html" target="_blank" rel="noopener noreferrer">发展历程</a>时，提到了 Hotspot VM，它是血缘最正统的 Java 虚拟机。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/seven-04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>HotSpot VM 是基于栈的一种虚拟机，当 Java 程序运行时，HotSpot VM 加载编译后的<a href="https://javabetter.cn/jvm/bytecode.html" target="_blank" rel="noopener noreferrer">字节码文件</a>（也就是.class 文件），其<a href="https://javabetter.cn/jvm/how-run-java-code.html" target="_blank" rel="noopener noreferrer">解释器</a>或<a href="https://javabetter.cn/jvm/jit.html" target="_blank" rel="noopener noreferrer">JIT</a>编译器会读取文件中的<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a>，将它们解释（或编译）为机器码。</p><p>方法调用和执行过程中的数据（如局部变量和中间结果）会存储在栈（操作数栈，下面会讲）中，字节码指令操作这些数据，然后执行程序逻辑。</p><p>下面这幅图我们之前在讲<a href="https://javabetter.cn/jvm/how-run-java-code.html" target="_blank" rel="noopener noreferrer">JVM 是如何运行 Java 代码</a>的时候讲过。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031143842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>main 方法被执行的时候，JVM 会创建一个栈帧（Stack Frame），通过存储局部变量表、操作数栈、动态链接、方法出口等信息来支撑和完成方法的执行，栈帧就是虚拟机栈中的子单位。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221152005.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><a href="https://javabetter.cn/jvm/stack-frame.html" target="_blank" rel="noopener noreferrer">栈帧</a>本身也是一种栈结构，用于支持虚拟机进行方法调用和方法执行，遵循 LIFO 的原则，每个栈帧都包含了一个方法的运行信息，每个方法从调用到执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈和出栈的过程。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231222175706.png" alt="图片来源于网络，作者浣熊say" tabindex="0" loading="lazy"><figcaption>图片来源于网络，作者浣熊say</figcaption></figure><p>虚拟机栈是线程私有的，每个线程都有自己的 Java 虚拟机栈。方法调用时都会创建一个新的栈帧，该栈帧被推入虚拟机栈，成为当前活动栈帧。</p><ul><li>入栈：方法调用时，虚拟机栈会为这个方法分配一个栈帧，这个栈帧被压入虚拟机栈，成为当前的活动栈帧。PC 寄存器指向当前栈帧的指令，执行方法的指令序列从该地址开始。</li><li>出栈：方法执行完成后，对应的栈帧会被移除，控制权回到前一个栈帧，前一个栈帧中的返回值成为当前活动栈帧的一个操作数，继续执行。</li></ul><p>其中的操作数栈（Operand Stack）也是一种栈结构，用于保存方法执行时的中间结果、参数和返回值。当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的。</p><p>在方法执行的过程中，操作数栈被用于执行各种<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a>。例如，将两个数字相加的指令会从操作数栈中弹出两个数字，将它们相加，然后将结果压入操作数栈中。</p><p>另外，操作数栈的内容是临时的，它的生命周期和方法的生命周期是一样的，当方法执行结束后，操作数栈也会被销毁。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221152930.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R 大曾在<a href="https://www.zhihu.com/question/35777031" target="_blank" rel="noopener noreferrer">知乎的贴子</a>里提到过：</p><blockquote><p>VM 当初设计的时候非常重视代码传输和存储的开销，因为假定的应用场景是诸如手持设备、机顶盒之类的嵌入式应用，所以要代码尽量小；外加基于栈的实现更简单（无论是在源码编译器的一侧还是在虚拟机的一侧），而且主要设计者 James Gosling 的个人经验上也对这种做法非常熟悉（例如他之前实现过 PostScript 的虚拟机，也是基于栈的指令集），所以就选择了基于栈。</p></blockquote><p>我们简单来看一下基于栈的虚拟机方法执行的过程，以下面的代码为例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 33</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 44</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>javap -c Main</code> 命令可以查看对应的字节码，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Compiled from &quot;Main.java&quot;</span></span>
<span class="line"><span>public class com.github.paicoding.forum.test.javabetter.jvm.Main {</span></span>
<span class="line"><span>  public static void main(java.lang.String[]);</span></span>
<span class="line"><span>    Code:</span></span>
<span class="line"><span>       0: bipush        33</span></span>
<span class="line"><span>       2: istore_1</span></span>
<span class="line"><span>       3: bipush        44</span></span>
<span class="line"><span>       5: istore_2</span></span>
<span class="line"><span>       6: iload_1</span></span>
<span class="line"><span>       7: iload_2</span></span>
<span class="line"><span>       8: iadd</span></span>
<span class="line"><span>       9: istore_3</span></span>
<span class="line"><span>      10: return</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用图来说明指令执行的过程，大致如下。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/zijiema-zhiling-20231216165442.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>iload_0 将 33 压入操作数栈中</li><li>iload_1 将 44 压入操作数栈中</li><li>iadd 将操作数栈中的 33 和 44 弹出，相加后将结果 77 压入操作数栈中</li><li>istore_2 将栈顶的 77 弹出，存入局部变量表中下标为 2 的位置</li></ul><p>关于字节码指令的具体释义，我们放到<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">下一节</a>去细讲，这里主要是带大家体会一下基于栈的虚拟机和基于寄存器的虚拟机之间的差别。</p><h2 id="基于寄存器的虚拟机" tabindex="-1"><a class="header-anchor" href="#基于寄存器的虚拟机"><span>基于寄存器的虚拟机</span></a></h2><p>那除了有基于栈的虚拟机实现，当然也有基于寄存器的虚拟机实现，比如 LuaVM，负责执行 <a href="https://www.lua.org/about.html" target="_blank" rel="noopener noreferrer">Lua 语言</a>，一门轻量级的脚本语言，可戳链接了解。</p><blockquote><p>5.0 之前的 Lua 其实是用基于栈的指令集，到 5.0 才改为用基于寄存器的。出于两点考虑，一是减少数据移动次数，降低数据迁移带来的拷贝开销；二是减少虚拟指令条数，提高指令执行效率。</p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/zijiema-zhiling-20231216163225.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>好，我们就基于 lua 来看一下基于寄存器的虚拟机方法执行的过程。</p><p>第一步，安装 lua，这里我用的是 macOS，直接用 brew 安装就好了。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">brew</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lua</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>Windows 用户可以查看这个文档：<a href="http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies" target="_blank" rel="noopener noreferrer">http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies</a></p></blockquote><p>也可以通过 Lua for Windows 来完成安装：</p><blockquote><p><a href="https://github.com/rjpcomputing/luaforwindows/releases" target="_blank" rel="noopener noreferrer">https://github.com/rjpcomputing/luaforwindows/releases</a></p></blockquote><p>我们来编写一段简单的 lua 代码，保存为 example.lua。</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">33</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">44</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后查看字节码指令。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">luac</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.lua</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221162729.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>main &lt;example.lua:0,0&gt; (6 instructions at 0x600002144080)</span></span>
<span class="line"><span>0+ params, 3 slots, 1 upvalue, 3 locals, 0 constants, 0 functions</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是函数的描述，表示这是 example.lua 文件中的主函数。它包含 6 条指令。函数不接受参数（0+ params），有 3 个本地变量槽位（3 slots），1 个闭包变量（1 upvalue），3 个本地变量（3 locals），没有常量（0 constants）和内部函数（0 functions）。</p><p>接下来是具体的指令：</p><ol><li>VARARGPREP 0：准备变长参数，用于处理传入的参数。</li><li>LOADI 0 33：将整数 33 加载到寄存器 0。</li><li>LOADI 1 44：将整数 44 加载到寄存器 1。</li><li>ADD 2 0 1：将寄存器 0 和寄存器 1 中的值相加，并将结果存放在寄存器 2。对应于脚本中两个数值的加法操作。</li><li>MMBIN 0 1 6; add：这是一个元方法（metamethod）调用，用于处理加法操作。这指示 Lua 虚拟机查找并执行 <code>add</code> 元方法。元方法是 Lua 中用于重载标准操作符的特殊方法。</li><li>RETURN 3 1 1; 0 out：返回操作，将寄存器 3 中的值作为返回值。<code>1 1</code> 表示从寄存器 3 返回一个值，<code>0 out</code> 指没有额外的返回值。</li></ol><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>基于栈的优点是可移植性更好、指令更短、实现起来简单，但不能随机访问栈中的元素，完成相同功能所需要的指令数也比寄存器的要多，需要频繁的入栈和出栈。</p><p>基于寄存器的优点是速度快，有利于程序运行速度的优化，但操作数需要显式指定，指令也比较长。</p><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括 Java 基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,62)]))}const h=a(n,[["render",r],["__file","vm-stack-register.html.vue"]]),c=JSON.parse('{"path":"/jvm/vm-stack-register.html","title":"栈虚拟机和寄存器虚拟机，有什么不同？","lang":"zh-CN","frontmatter":{"title":"栈虚拟机和寄存器虚拟机，有什么不同？","shortTitle":"栈虚拟机和寄存器虚拟机","category":["Java核心"],"tag":["Java虚拟机"],"description":"栈虚拟机的字节码指令更简单，寄存器虚拟机的执行速度更快。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,栈虚拟机,寄存器虚拟机"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/jvm/vm-stack-register.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"栈虚拟机和寄存器虚拟机，有什么不同？"}],["meta",{"property":"og:description","content":"栈虚拟机的字节码指令更简单，寄存器虚拟机的执行速度更快。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221150449.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈虚拟机和寄存器虚拟机，有什么不同？\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221150449.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/seven-04.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031143842.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221152005.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231222175706.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221152930.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/zijiema-zhiling-20231216165442.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/zijiema-zhiling-20231216163225.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/vm-stack-register-20231221162729.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"栈和寄存器","slug":"栈和寄存器","link":"#栈和寄存器","children":[]},{"level":2,"title":"基于栈的虚拟机","slug":"基于栈的虚拟机","link":"#基于栈的虚拟机","children":[]},{"level":2,"title":"基于寄存器的虚拟机","slug":"基于寄存器的虚拟机","link":"#基于寄存器的虚拟机","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1703169878000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":7.88,"words":2364},"filePathRelative":"jvm/vm-stack-register.md","localizedDate":"2023年12月21日","excerpt":"\\n<p>本来这节内容是打算直接讲字节码指令的，但讲之前又必须得先讲指令集架构，而指令集架构又分为两种，一种是基于栈的，一种是基于寄存器的。</p>\\n<p>那不妨我们这节就单独来讲讲栈虚拟机和寄存器虚拟机，它们有什么不同，以及各自的优缺点。</p>\\n<h2>栈和寄存器</h2>\\n<p>关于栈这个数据结构，我们前面曾讲过，戳<a href=\\"https://javabetter.cn/collection/stack.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">链接</a>直达。</p>\\n<p>寄存器（Register）是中央处理器（CPU）内用来暂存指令、数据和地址的存储器，也是 CPU 中读写最快的存储器。</p>"}');export{h as comp,c as data};
