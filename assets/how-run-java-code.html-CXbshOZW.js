import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e,o as n}from"./app-BeHkqkE2.js";const t={};function l(r,a){return n(),s("div",null,a[0]||(a[0]=[e(`<h1 id="第二节-jvm如何运行java代码" tabindex="-1"><a class="header-anchor" href="#第二节-jvm如何运行java代码"><span>第二节：JVM如何运行Java代码？</span></a></h1><p>“二哥，看了 <a href="https://javabetter.cn/overview/hello-world.html" target="_blank" rel="noopener noreferrer">Hello World</a> 的代码后，我很好奇，它是怎么在 IDEA 的 Run 面板里打印出‘三妹，少看手机少打游戏，好好学，美美哒’呢？”三妹咪了一口麦香可可奶茶后对我说。</p><p>“三妹，我们通常把 Java 代码执行的过程分为编译期和运行时，弄清楚这两个阶段就知道原因了。”我微笑着对三妹说，“对于一个 Java 程序员来说，写了那么久的代码，总要搞清楚自己写的 Java 代码到底是怎么运行起来的。这个问题在面试的时候也经常会被问到。”</p><p>一起来看下吧。</p><h2 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期"><span>编译期</span></a></h2><p>贴一下 HelloWorld 这段代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 微信搜「沉默王二」，回复关键字 PDF</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;三妹，少看手机少打游戏，好好学，美美哒。&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击 IDEA 工具栏中的锤子按钮（Build Project，编译整个项目，通常情况下，并不需要主动编译，IDEA 会自动帮我们编译），如下图所示。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时候，就可以在 src 的同级目录 target 下找到一个名为 HelloWorld.class 的文件。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果找不到的话，在目录上右键选择「Reload from Disk，从磁盘上重新加载」，如下图所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以双击打开它，看到如下所示的内容。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Source code recreated from a .class file by IntelliJ IDEA</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// (powered by Fernflower decompiler)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.itwanger.five</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;三妹，少看手机少打游戏，好好学，美美哒。&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IDEA 默认会用 <a href="https://github.com/fesh0r/fernflower" target="_blank" rel="noopener noreferrer">Fernflower</a> 这个反编译工具将字节码文件（后缀为 .class 的文件，也就是 Java 源代码编译后的文件）反编译为我们可以看得懂的 Java 源代码。</p><p>但实际上，<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">字节码文件</a>并不是这样的，它包含了 JVM 执行的指令，还有类的元数据信息，如类名、方法和属性等。如果用 「show bytecode」打开字节码文件的话，它是下面这样子的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// class version 58.0 (58)</span></span>
<span class="line"><span>// access flags 0x21</span></span>
<span class="line"><span>public class com/itwanger/five/HelloWorld {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // compiled from: HelloWorld.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // access flags 0x1</span></span>
<span class="line"><span>  public &lt;init&gt;()V</span></span>
<span class="line"><span>   L0</span></span>
<span class="line"><span>    LINENUMBER 6 L0</span></span>
<span class="line"><span>    ALOAD 0</span></span>
<span class="line"><span>    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span></span>
<span class="line"><span>    RETURN</span></span>
<span class="line"><span>   L1</span></span>
<span class="line"><span>    LOCALVARIABLE this Lcom/itwanger/five/HelloWorld; L0 L1 0</span></span>
<span class="line"><span>    MAXSTACK = 1</span></span>
<span class="line"><span>    MAXLOCALS = 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // access flags 0x9</span></span>
<span class="line"><span>  public static main([Ljava/lang/String;)V</span></span>
<span class="line"><span>   L0</span></span>
<span class="line"><span>    LINENUMBER 8 L0</span></span>
<span class="line"><span>    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span></span>
<span class="line"><span>    LDC &quot;\\u4e09\\u59b9\\uff0c\\u5c11\\u770b\\u624b\\u673a\\u5c11\\u6253\\u6e38\\u620f\\uff0c\\u597d\\u597d\\u5b66\\uff0c\\u7f8e\\u7f8e\\u54d2\\u3002&quot;</span></span>
<span class="line"><span>    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V</span></span>
<span class="line"><span>   L1</span></span>
<span class="line"><span>    LINENUMBER 9 L1</span></span>
<span class="line"><span>    RETURN</span></span>
<span class="line"><span>   L2</span></span>
<span class="line"><span>    LOCALVARIABLE args [Ljava/lang/String; L0 L2 0</span></span>
<span class="line"><span>    MAXSTACK = 2</span></span>
<span class="line"><span>    MAXLOCALS = 1</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是就有点看不懂了？我第一次看到这段内容的时候也很头大，不过不要担心，后面我们再一块深入研究，这里就提前感受一下 <a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">bytecode</a>（也就是字节码）的魅力（😂）。</p><p>怎么查看 bytecode 呢？</p><p>可以通过 IDEA 菜单栏中的「View」→「Show Bytecode」查看，如下图所示。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个 bytecode 可以直译为字节码。</p><p>字节码并不是机器码，操作系统无法直接识别，需要在操作系统上安装不同版本的 <a href="https://javabetter.cn/jvm/what-is-jvm.html" target="_blank" rel="noopener noreferrer">JVM</a> 来识别。</p><p>通常情况下，我们只需要安装不同版本的 JDK（Java Development Kit，Java 开发工具包）就行了，它里面包含了 JRE（Java Runtime Environment，Java 运行时环境），而 JRE 又包含了 JVM。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-05.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Windows、Linux、MacOS 等操作系统都有相应的 JDK，只要安装好了 JDK 就有了 Java 的运行时环境，就可以把 Java 源代码编译为字节码，然后字节码又可以在不同的操作系统上运行了。</p><blockquote><p>build once，run anywhere。</p></blockquote><h3 id="jclasslib" tabindex="-1"><a class="header-anchor" href="#jclasslib"><span>jclasslib</span></a></h3><p>这里给推荐一款查看字节码文件的插件 <code>jclasslib</code>，可以在 IDEA 插件市场中安装。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-07.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装完成之后，点击 View -&gt; Show Bytecode With jclasslib 即可查看字节码文件了（点击之前，光标要停留在对应的类文件上），如下图所示。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-08.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用 jclasslib 不仅可以直观地查看类对应的字节码，还可以查看类的基本信息、常量池、接口、字段、方法等信息，如下图所示，<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">后面也会细讲</a>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-09.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是说，<strong>在编译阶段，Java 会将 Java 源代码文件编译为字节码文件</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字节码文件如果用十六进制编辑器（<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">下一节</a>会讲到）打开的话，内容如下所示（本身是 01 串的二进制），十六进制更容易看懂（虽然肉眼也很难看得懂😂）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cafe babe 0000 0034 0013 0a00 0400 0f09</span></span>
<span class="line"><span>0003 0010 0700 1107 0012 0100 016d 0100</span></span>
<span class="line"><span>0149 0100 063c 696e 6974 3e01 0003 2829</span></span>
<span class="line"><span>5601 0004 436f 6465 0100 0f4c 696e 654e</span></span>
<span class="line"><span>756d 6265 7254 6162 6c65 0100 0369 6e63</span></span>
<span class="line"><span>0100 0328 2949 0100 0a53 6f75 7263 6546</span></span>
<span class="line"><span>696c 6501 0009 4d61 696e 2e6a 6176 610c</span></span>
<span class="line"><span>0007 0008 0c00 0500 0601 0010 636f 6d2f</span></span>
<span class="line"><span>7268 7974 686d 372f 4d61 696e 0100 106a</span></span>
<span class="line"><span>6176 612f 6c61 6e67 2f4f 626a 6563 7400</span></span>
<span class="line"><span>2100 0300 0400 0000 0100 0200 0500 0600</span></span>
<span class="line"><span>0000 0200 0100 0700 0800 0100 0900 0000</span></span>
<span class="line"><span>1d00 0100 0100 0000 052a b700 01b1 0000</span></span>
<span class="line"><span>0001 000a 0000 0006 0001 0000 0003 0001</span></span>
<span class="line"><span>000b 000c 0001 0009 0000 001f 0002 0001</span></span>
<span class="line"><span>0000 0007 2ab4 0002 0460 ac00 0000 0100</span></span>
<span class="line"><span>0a00 0000 0600 0100 0000 0800 0100 0d00</span></span>
<span class="line"><span>0000 0200 0e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时"><span>运行时</span></a></h2><p>当有了 .class 文件也就是<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">字节码文件</a>之后，我们需要启动 JVM 来运行字节码文件，也就是 run 阶段，之前是 build 阶段。</p><p>JVM 会先通过<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类加载器</a>加载字节码文件，然后将字节码加载到 JVM 的运行时数据区，再通过执行引擎转化为机器码最终交给操作系统执行。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231030194039.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们使用 <a href="https://javabetter.cn/jvm/bytecode.html" target="_blank" rel="noopener noreferrer">javap</a>（后面会细讲）来看一下 HelloWorld 的字节码指令序列。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0 getstatic #2 &lt;java/lang/System.out&gt;</span></span>
<span class="line"><span>3 ldc #3 &lt;Hello World&gt;</span></span>
<span class="line"><span>5 invokevirtual #4 &lt;java/io/PrintStream.println&gt;</span></span>
<span class="line"><span>8 return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字节码指令序列通常由多条指令组成，每条指令由一个操作码和若干个操作数构成。</p><ul><li>操作码：一个字节大小的指令，用于表示具体的操作。</li><li>操作数：跟随操作码，用于提供额外信息。</li></ul><p>这段字节码序列的意思是调用 System.out.println 方法打印&quot;Hello World&quot;字符串。下面是详细的解释：</p><p>①、<code>0: getstatic #2 &lt;java/lang/System.out&gt;</code>：</p><ul><li>操作码：getstatic</li><li>操作数：#2</li><li>描述：这条指令的作用是获取静态字段，这里获取的是<code>java.lang.System</code>类的<code>out</code>静态字段，它是一个<code>PrintStream</code>类型的输出流。#2 是一个指向<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">常量池</a>的索引，后面在讲类文件结构时会讲到。</li></ul><p>②、<code>3: ldc #3 &lt;Hello World&gt;</code>：</p><ul><li>操作码：ldc</li><li>操作数：#3</li><li>描述：这条指令的作用是从常量池中加载一个常量值（字符串&quot;Hello World&quot;）到操作数栈顶。#3 是一个指向常量池的索引，常量池里存储了字符串&quot;Hello World&quot;的引用。</li></ul><p>③、<code>5: invokevirtual #4 &lt;java/io/PrintStream.println&gt;</code>：</p><ul><li>操作码：invokevirtual</li><li>操作数：#4</li><li>描述：这条指令的作用是调用方法。这里调用的是<code>PrintStream</code>类的<code>println</code>方法，用来打印字符串。#4 是一个指向常量池的索引，常量池里存储了<code>java/io/PrintStream.println</code>方法的引用信息。</li></ul><p>④、<code>8: return</code>：</p><ul><li>操作码：return</li><li>描述：这条指令的作用是从当前方法返回。</li></ul><p>上面的 getstatic、ldc、invokevirtual、return 等就是 <a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a>的操作码。</p><p>可以使用 <a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%82%A8" target="_blank" rel="noopener noreferrer">hexdump</a>，一个在 Unix 和 Linux 系统中常用的工具，用于以十六进制的形式显示文件的内容，看一下字节码的二进制内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b2 00 02 12 03 b6 00 04 b1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：这里是二进制文件的 16 进制表示，也就是 hex，一般分析二进制文件都是以 hex 进行分析。字节码指令和二进制之间的对应关系，以及对应的语义如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0xb2   getstatic       获取静态字段的值</span></span>
<span class="line"><span>0x12   ldc             常量池中的常量值入栈</span></span>
<span class="line"><span>0xb6   invokevirtual   运行时方法绑定调用方法</span></span>
<span class="line"><span>0xb1   return          void 方法返回</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM 就是靠解析这些字节码指令来完成程序执行的。常见的执行方式有两种，一种是解释执行，对字节码逐条解释执行；一种是 <a href="https://javabetter.cn/jvm/jit.html" target="_blank" rel="noopener noreferrer">JIT</a>，也就是即时编译，它会在运行时将热点代码优化并缓存起来，下次再执行的时候直接使用缓存起来的机器码，而不需要再次解释执行。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/how-run-java-code-91dac706-1c4e-4775-bc4e-b2104283aa04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样就可以提高程序的执行效率。</p><p>注意，当<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类加载器</a>完成字节码数据加载任务后，JVM 划分了专门的内存区域来装载这些字节码数据以及运行时中间数据。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20240110194325.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中 PC 寄存器、虚拟机栈以及本地方法栈属于线程私有的，堆以及元空间（方法区的实现）属于共享数据区，不同的线程共享这两部分内存数据。</p><p>如果虚拟机中的当前线程执行的是 Java 的<a href="https://javabetter.cn/oo/method.html" target="_blank" rel="noopener noreferrer">普通方法</a>，那么 PC 寄存器中存储的是方法的第一条指令，当方法开始执行之后， PC 寄存器存储的是下一个字节码指令的地址。</p><p>如果虚拟机中的当前线程执行的是 <a href="https://javabetter.cn/oo/native-method.html" target="_blank" rel="noopener noreferrer">native 方法</a>，那么 PC 寄存器中的值为 undefined。</p><p>如果遇到判断分支、循环以及异常等不同的控制转移语句，PC 寄存器会被置为目标字节码指令的地址。</p><p>另外在多线程切换的时候，虚拟机会记录当前线程的 PC 寄存器，当线程切换回来的时候会根据此前记录的值恢复到 PC 寄存器中，来继续执行线程的后续的字节码指令。</p><p>除了 PC 寄存器外，字节码指令的执行流转还需要<a href="https://javabetter.cn/jvm/vm-stack-register.html" target="_blank" rel="noopener noreferrer">虚拟机栈</a>的参与。我们先来看下虚拟机栈的大致结构，如下图所示。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031142106.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虚拟机栈操作的基本元素就是栈帧，栈帧主要包含了局部变量表、操作数栈、动态连接以及方法返回地址。栈帧是一个先进后出的数据结构，每个方法从调用到执行完成都会对应一个栈帧在虚拟机栈中入栈和出栈。</p><p>知道了虚拟机栈的结构之后，我们来看下方法执行的流转过程是怎样的。</p><p>以这段代码为例，一个 Test 类，main 方法里 new 了一个 Uesr 对象，会将 User 的 age 作为参数传递给静态方法 calculate 进行一个简单的加法操作并返回，最后打印到控制台。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">  =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、JVM 完成 .class 文件加载之后，会创建一个名为&quot;main&quot;的线程，该线程会自动调用名为&quot;main&quot;的静态方法，这是 Java 程序的入口点；</p><p>2、main 线程在执行 main 方法时，JVM 会在虚拟机栈中压入 main 方法对应的栈帧；</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031143842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3、栈帧的操作数栈中存储了操作的数据，JVM 执行字节码指令的时候会从操作数栈中获取数据，执行计算操作后会将结果再次压入操作数栈中；</p><p>4、当进行 calculate 方法调用的时候，虚拟机栈继续压入 calculate 方法对应的栈帧。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031144218.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5、对于 age + 3 这条加法指令，在执行该指令前，JVM 会将操作数栈顶部的两个元素弹出，并将它们相加，然后将结果压入操作数栈中。</p><p>在这个例子中，指令的操作码是“add”，它表示执行加法操作；操作数 0，表示从操作数栈的顶部获取第一个操作数；操作数 1，表示从操作数栈的次顶部获取第二个操作数。</p><p>6、PC 寄存器中存储了下一条需要执行的字节码指令地址。</p><p>7、当 calculate 方法执行完成后，对应的栈帧将从虚拟机栈中弹出，方法执行的结果会被压入 main 栈帧中的操作数栈中，而方法返回地址被重置到 main 线程的 PC 寄存器中，以便于后续字节码执行引擎从 PC 寄存器中获取下一条命令的地址。</p><p>如果方法没有返回值，JVM 会将一个 null 值压入调用该方法的栈帧的操作数栈中，作为占位符，以便恢复调用方的操作数栈状态。</p><p>8、执行引擎中的解释器会从程序计数器中获取下一个字节码指令的地址，也就是元空间中对应的字节码指令，在获取到指令之后，通过解释器解释为对应的机器指令，最终由 CPU 进行执行。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>“好的，三妹，今天我们就先讲到这里，来简单总结下。”我长舒一口气，说到。</p><p>Java 代码首先被编译器转换为字节码，然后在 JVM 上运行。在运行时，JVM 通过解释执行或即时编译（JIT）将字节码转换为机器码。解释执行直接运行字节码，而 JIT 在运行时将热点代码编译优化为机器码以提升性能。</p><p>这中间需要运行时数据区来存储字节码数据以及运行时中间数据。</p><p>字节码是 JVM 中非常关键的内容，涉及到<a href="https://javabetter.cn/jvm/class-load.html" target="_blank" rel="noopener noreferrer">类的加载机制</a>、<a href="https://javabetter.cn/jvm/class-file-jiegou.html" target="_blank" rel="noopener noreferrer">字节码文件的结构</a>、<a href="https://javabetter.cn/jvm/zijiema-zhiling.html" target="_blank" rel="noopener noreferrer">字节码指令</a>的执行流程等等，后面我们会细讲。</p><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/pj3Y-O2eIRF5tQmHboGN3A" target="_blank" rel="noopener noreferrer">JVM 是如何运行 Java 程序的</a>，作者梦尧技术，写的很不错。</p></blockquote><hr><p>GitHub 上标星 10000+ 的开源知识库《<a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">二哥的 Java 进阶之路</a>》第一版 PDF 终于来了！包括 Java 基础语法、数组&amp;字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：<a href="https://javabetter.cn/overview/" target="_blank" rel="noopener noreferrer">太赞了，GitHub 上标星 10000+ 的 Java 教程</a></p><p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,99)]))}const d=i(t,[["render",l],["__file","how-run-java-code.html.vue"]]),c=JSON.parse('{"path":"/jvm/how-run-java-code.html","title":"JVM到底是如何运行Java代码的？3000 字 10 张手绘图带你彻底掌握。","lang":"zh-CN","frontmatter":{"title":"JVM到底是如何运行Java代码的？3000 字 10 张手绘图带你彻底掌握。","shortTitle":"JVM如何运行Java代码？","category":["Java核心"],"tag":["Java虚拟机"],"description":"Java代码首先被编译器转换为字节码，然后在JVM上运行。在运行时，JVM通过解释执行或即时编译（JIT）将字节码转换为机器码。解释执行直接运行字节码，而JIT在运行时将热点代码编译优化为机器码以提升性能。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,字节码,字节码指令,字节码文件,字节码文件结构"}],["meta",{"property":"og:url","content":"https://javabetter.cn/toBeBetterJavaer/jvm/how-run-java-code.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"JVM到底是如何运行Java代码的？3000 字 10 张手绘图带你彻底掌握。"}],["meta",{"property":"og:description","content":"Java代码首先被编译器转换为字节码，然后在JVM上运行。在运行时，JVM通过解释执行或即时编译（JIT）将字节码转换为机器码。解释执行直接运行字节码，而JIT在运行时将热点代码编译优化为机器码以提升性能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T06:18:01.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2024-09-13T06:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM到底是如何运行Java代码的？3000 字 10 张手绘图带你彻底掌握。\\",\\"image\\":[\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-01.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-02.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-03.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-04.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-05.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-07.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-08.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-09.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/five-10.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231030194039.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/how-run-java-code-91dac706-1c4e-4775-bc4e-b2104283aa04.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/neicun-jiegou-20240110194325.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031142106.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031143842.png\\",\\"https://cdn.tobebetterjavaer.com/stutymore/how-run-java-code-20231031144218.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png\\"],\\"dateModified\\":\\"2024-09-13T06:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"编译期","slug":"编译期","link":"#编译期","children":[{"level":3,"title":"jclasslib","slug":"jclasslib","link":"#jclasslib","children":[]}]},{"level":2,"title":"运行时","slug":"运行时","link":"#运行时","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1605708395000,"updatedTime":1726208281000,"contributors":[{"name":"root","email":"root@instance-tw.asia-east1-b.c.valid-arc-377619.internal","commits":1}]},"readingTime":{"minutes":12.72,"words":3817},"filePathRelative":"jvm/how-run-java-code.md","localizedDate":"2020年11月18日","excerpt":"\\n<p>“二哥，看了 <a href=\\"https://javabetter.cn/overview/hello-world.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Hello World</a> 的代码后，我很好奇，它是怎么在 IDEA 的 Run 面板里打印出‘三妹，少看手机少打游戏，好好学，美美哒’呢？”三妹咪了一口麦香可可奶茶后对我说。</p>\\n<p>“三妹，我们通常把 Java 代码执行的过程分为编译期和运行时，弄清楚这两个阶段就知道原因了。”我微笑着对三妹说，“对于一个 Java 程序员来说，写了那么久的代码，总要搞清楚自己写的 Java 代码到底是怎么运行起来的。这个问题在面试的时候也经常会被问到。”</p>"}');export{d as comp,c as data};
